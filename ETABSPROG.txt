Imports System
Imports System.IO
Imports System.Text
Imports System.Xml
Imports System.Text.RegularExpressions

Public Class Form1

    Dim dtCrtdUnits As New DataTable
    Dim dtCrtdNode As New DataTable
    Dim dtCrtdElem_conn As New DataTable
    Dim dtCrtdElem As New DataTable
    Dim dtMatgrade As New DataTable
    Dim dtNodalLoads As New DataTable
    Dim dtLoadCases As New DataTable
    Dim dtStorydata As New DataTable

    Dim dtcrtdnodeorg As New DataTable
    Dim dtcrtdlineassign As New DataTable
    Dim dtcrtdstoryorg As New DataTable
    Dim node_passing As New DataTable
    Dim dtpointassign As New DataTable
    Dim dtboundary_conditions As New DataTable
    Dim dtload_pattern As New DataTable
    Dim dtbeam_loads As New DataTable
    Dim dtarea_assign As New DataTable
    Dim dtarea_conn As New DataTable
    Dim dtthickness As New DataTable
    Dim dtarea_ele_pass As New DataTable
    Dim dt_converter_table_node As New DataTable
    Dim dt_area_load_etabs As New DataTable
    Dim dt_area_load_type As New DataTable
    Dim dt_areaload_pass As New DataTable
    Dim dt_final_element_list As New DataTable
    Dim dt_loadset As New DataTable
    Dim dtProSection As New DataTable
    Dim dtProSectionUndef As New DataTable
    Dim dtmodifier As New DataTable
    Dim dt_pointspring As New DataTable
    Dim dt_springs As New DataTable

    Dim in_path As String
    Dim only_file_name As String
    Dim extension As String
    Dim out_path As String
    Dim out_path_2 As String
    Dim file_name As String
    Dim lines() As String
    Dim linesSAFE As String
    Dim line_count As Integer
    Dim story_height_sum As Single
    Dim nth_row As Integer

    Dim nodenumber As Integer
    Dim elementnumber As Integer
    Dim story_height As Single
    Dim no_story As Integer
    Dim once As Integer = 0
    Dim area_counter As Integer = 1
    Dim Connectivity_Count As Integer = 1
    Dim area_element_count_begin As Integer
    Dim node_count_infunc As Integer = 0
    Dim tot_org_nodes As Integer = 0
    Dim storydata_count As Integer = 0
    Dim final_plate_count_start As Integer = 0
    Dim code_ref As String = "NULL"

    '''''''''''''''''''''''''''''''''''''''''''''

    'Dim Material_id As Integer = 1
    'Dim sec_id As Integer = 1
    'Dim loadpattern_id As Integer = 1
    'Dim thickness_id_slab As Integer = 1
    'Dim thickness_id_wall As Integer = 100
    'Dim pointload_id As Integer = 1
    'Dim Material_name As String
    'Dim Specific_Heat As Double
    'Dim Heat_Conduction As Double
    'Dim Damping_Ratio As Double
    'Dim Modulus_Of_Elasticity As Double
    'Dim Poisons_Ratio As Double
    'Dim Thermal_Coeff As Double
    'Dim Weight_Density As Double
    'Dim nodes As New List(Of String)()

    'Dim lineload_ct As Integer = 0
    'Dim p01 As Double
    'Dim p02 As Double
    'Dim p03 As Double
    'Dim p04 As Double
    'Dim p11 As Double
    'Dim p12 As Double
    'Dim p13 As Double
    'Dim p14 As Double
    'Dim p21 As Double
    'Dim p22 As Double
    'Dim p23 As Double
    'Dim p24 As Double
    'Dim prevpart As String = "123"
    'Dim point_chk As Integer = 0

    'Dim lnas_chk As Integer = 0
    'Dim ll_chk As Integer = 0
    Private Sub Button1_Click(sender As Object, e As EventArgs) Handles Button1.Click
        Try
            extension = Path.GetExtension(file_name)
            dtCrtdUnits.Columns.Add("Force", GetType(String))
            dtCrtdUnits.Columns.Add("Length", GetType(String))
            dtCrtdUnits.Columns.Add("Heat", GetType(String))
            dtCrtdUnits.Columns.Add("Temper", GetType(String))

            dtCrtdNode.Columns.Add("Node_Number")
            dtCrtdNode.Columns.Add("X")
            dtCrtdNode.Columns.Add("Y")
            dtCrtdNode.Columns.Add("Z")
            dtCrtdNode.Columns.Add("IS_PASSING")
            dtCrtdNode.Columns.Add("Node_orignal")
            dtCrtdNode.Columns.Add("Story_orignal")

            dtCrtdElem_conn.Columns.Add("Element_Number", GetType(String))
            dtCrtdElem_conn.Columns.Add("Type", GetType(String))
            dtCrtdElem_conn.Columns.Add("N1", GetType(String))
            dtCrtdElem_conn.Columns.Add("N2", GetType(String))
            dtCrtdElem_conn.Columns.Add("Floor_var", GetType(String))

            dtCrtdElem.Columns.Add("Element_Number", GetType(String))
            dtCrtdElem.Columns.Add("Type", GetType(String))
            dtCrtdElem.Columns.Add("Section", GetType(String))
            dtCrtdElem.Columns.Add("Material", GetType(String))
            dtCrtdElem.Columns.Add("N1", GetType(String))
            dtCrtdElem.Columns.Add("N2", GetType(String))
            dtCrtdElem.Columns.Add("Floor_var", GetType(String))

            dtcrtdnodeorg.Columns.Add("Node_Number_org")
            dtcrtdnodeorg.Columns.Add("X1")
            dtcrtdnodeorg.Columns.Add("X2")
            dtcrtdnodeorg.Columns.Add("Z_dash")

            dtcrtdlineassign.Columns.Add("la_uq_elem", GetType(String))
            dtcrtdlineassign.Columns.Add("la_story", GetType(String))
            dtcrtdlineassign.Columns.Add("la_section", GetType(String))

            dtcrtdstoryorg.Columns.Add("Story_name")
            dtcrtdstoryorg.Columns.Add("Story_height")

            dtStorydata.Columns.Add("Story_name")
            dtStorydata.Columns.Add("Story_height")

            dtpointassign.Columns.Add("Node_Number")
            dtpointassign.Columns.Add("Floor")
            dtpointassign.Columns.Add("Restraint")

            dtboundary_conditions.Columns.Add("Node_Number")
            dtboundary_conditions.Columns.Add("Dx")
            dtboundary_conditions.Columns.Add("Dy")
            dtboundary_conditions.Columns.Add("Dz")
            dtboundary_conditions.Columns.Add("Rx")
            dtboundary_conditions.Columns.Add("Ry")
            dtboundary_conditions.Columns.Add("Rz")

            dtMatgrade.Columns.Add("Material_id")
            dtMatgrade.Columns.Add("Material_name")
            dtMatgrade.Columns.Add("Specific_Heat")
            dtMatgrade.Columns.Add("Heat_Conduction")
            dtMatgrade.Columns.Add("Damping_Ratio")
            dtMatgrade.Columns.Add("Modulus_Of_Elasticity")
            dtMatgrade.Columns.Add("Poisons_Ratio")
            dtMatgrade.Columns.Add("Thermal_Coeff")
            dtMatgrade.Columns.Add("Weight_Density")
            dtMatgrade.Columns.Add("Material_type")

            dtProSection.Columns.Add("Section_id")
            dtProSection.Columns.Add("Section_name")
            dtProSection.Columns.Add("Section_mat")
            dtProSection.Columns.Add("Section_mat_name")
            dtProSection.Columns.Add("Section_shape")
            dtProSection.Columns.Add("d1")
            dtProSection.Columns.Add("d2")
            dtProSection.Columns.Add("d3")
            dtProSection.Columns.Add("d4")
            dtProSection.Columns.Add("d5")
            dtProSection.Columns.Add("d6")
            dtProSection.Columns.Add("d7")
            dtProSection.Columns.Add("d8")

            dtProSectionUndef.Columns.Add("Section_id")
            dtProSectionUndef.Columns.Add("Section_name")
            dtProSectionUndef.Columns.Add("Section_mat")

            dtload_pattern.Columns.Add("Pattern_id")
            dtload_pattern.Columns.Add("Pattern_name")
            dtload_pattern.Columns.Add("Pattern_type")

            dtNodalLoads.Columns.Add("Node_id")
            dtNodalLoads.Columns.Add("Node_number")
            dtNodalLoads.Columns.Add("FX")
            dtNodalLoads.Columns.Add("FY")
            dtNodalLoads.Columns.Add("FZ")
            dtNodalLoads.Columns.Add("MX")
            dtNodalLoads.Columns.Add("MY")
            dtNodalLoads.Columns.Add("MZ")
            dtNodalLoads.Columns.Add("LC_NAME")

            dtbeam_loads.Columns.Add("Element_number")
            dtbeam_loads.Columns.Add("Loading_direction")
            dtbeam_loads.Columns.Add("d1")
            dtbeam_loads.Columns.Add("p1")
            dtbeam_loads.Columns.Add("d2")
            dtbeam_loads.Columns.Add("p2")
            dtbeam_loads.Columns.Add("d3")
            dtbeam_loads.Columns.Add("p3")
            dtbeam_loads.Columns.Add("d4")
            dtbeam_loads.Columns.Add("p4")
            dtbeam_loads.Columns.Add("LC_NAME")
            dtbeam_loads.Columns.Add("Type_to_print")
            dtbeam_loads.Columns.Add("Projection")

            dtarea_assign.Columns.Add("Area_name")
            dtarea_assign.Columns.Add("Area_story")
            dtarea_assign.Columns.Add("Area_section")

            dtarea_conn.Columns.Add("Connectivity_Count")
            dtarea_conn.Columns.Add("Material")
            dtarea_conn.Columns.Add("Property")
            dtarea_conn.Columns.Add("N1")
            dtarea_conn.Columns.Add("N2")
            dtarea_conn.Columns.Add("N3")
            dtarea_conn.Columns.Add("N4")
            dtarea_conn.Columns.Add("SUB")
            dtarea_conn.Columns.Add("WID")
            dtarea_conn.Columns.Add("Connectivity_name")
            dtarea_conn.Columns.Add("Connectivity_floor_chk")
            dtarea_conn.Columns.Add("chker")

            dtthickness.Columns.Add("Thickness_id")
            dtthickness.Columns.Add("Thickness_name")
            dtthickness.Columns.Add("Thickness_material")
            dtthickness.Columns.Add("Thickness_depth")

            dtarea_ele_pass.Columns.Add("Connectivity_Count")
            dtarea_ele_pass.Columns.Add("Material")
            dtarea_ele_pass.Columns.Add("Property")
            dtarea_ele_pass.Columns.Add("N1")
            dtarea_ele_pass.Columns.Add("N2")
            dtarea_ele_pass.Columns.Add("N3")
            dtarea_ele_pass.Columns.Add("N4")
            dtarea_ele_pass.Columns.Add("SUB")
            dtarea_ele_pass.Columns.Add("WID")
            dtarea_ele_pass.Columns.Add("Orignal_area_name")
            dtarea_ele_pass.Columns.Add("Orignal_area_story")
            dtarea_ele_pass.Columns.Add("chker")

            dt_area_load_etabs.Columns.Add("Area_name")
            dt_area_load_etabs.Columns.Add("Area_story")
            dt_area_load_etabs.Columns.Add("Area_type")
            dt_area_load_etabs.Columns.Add("Area_dir")
            dt_area_load_etabs.Columns.Add("Area_loadcase")
            dt_area_load_etabs.Columns.Add("Area_load_mag")

            dt_area_load_type.Columns.Add("Loadcase_name")
            dt_area_load_type.Columns.Add("Loadcase_name_area")
            dt_area_load_type.Columns.Add("Loadcase_name_story")
            dt_area_load_type.Columns.Add("Loadcase_name_dir")

            dt_areaload_pass.Columns.Add("Area_pass_name")
            dt_areaload_pass.Columns.Add("Area_pass_dir")
            dt_areaload_pass.Columns.Add("Area_pass_n1")
            dt_areaload_pass.Columns.Add("Area_pass_n2")
            dt_areaload_pass.Columns.Add("Area_pass_n3")
            dt_areaload_pass.Columns.Add("Area_pass_n4")

            dt_final_element_list.Columns.Add("Final_reference")
            dt_final_element_list.Columns.Add("Final_org_name")
            dt_final_element_list.Columns.Add("Final_org_story")

            dt_loadset.Columns.Add("Loadset_name")
            dt_loadset.Columns.Add("Loadset_pattern")
            dt_loadset.Columns.Add("Loadset_magnitude")

            dtmodifier.Columns.Add("mod_id")
            dtmodifier.Columns.Add("amod")
            dtmodifier.Columns.Add("a2mod")
            dtmodifier.Columns.Add("a3mod")
            dtmodifier.Columns.Add("jmod")
            dtmodifier.Columns.Add("i2mod")
            dtmodifier.Columns.Add("i3mod")
            dtmodifier.Columns.Add("mmod")
            dtmodifier.Columns.Add("wmod")

            dt_pointspring.Columns.Add("Spring_name")
            dt_pointspring.Columns.Add("UX")
            dt_pointspring.Columns.Add("UY")
            dt_pointspring.Columns.Add("UZ")
            dt_pointspring.Columns.Add("RX")
            dt_pointspring.Columns.Add("RY")
            dt_pointspring.Columns.Add("RZ")

            dt_springs.Columns.Add("Sp_node")
            dt_springs.Columns.Add("Sp_ux")
            dt_springs.Columns.Add("Sp_uy")
            dt_springs.Columns.Add("Sp_uz")
            dt_springs.Columns.Add("Sp_rx")
            dt_springs.Columns.Add("Sp_ry")
            dt_springs.Columns.Add("Sp_rz")



            ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
            If extension = ".$et" Or extension = ".e2k" Or extension = ".$ET" Or extension = ".E2K" Then
                ETABS()
                '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
            ElseIf extension = ".$ft" Or extension = ".f2k" Or extension = ".$FT" Or extension = ".F2K" Then
                SAFE()
                MessageBox.Show("YOU ARE IN SAFE")
                '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
            Else
                MessageBox.Show("Wrong Extension")
                delete_db() 'Clears all table !
            End If
            ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        Catch ex As Exception
            MessageBox.Show("Error Encontered in line : " & lines(line_count))
            ProgressBar_read.Value = 0
            delete_db()
        End Try
    End Sub

    Public Function parsing_units(ByVal parts() As String)
        If parts(1) = "LB" Then
            parts(1) = "LBF"
        End If
        dtCrtdUnits.Rows.Add(parts(1), parts(3), "BTU", parts(5))
    End Function
    Function ETABS()

        Dim Material_id As Integer = 1
        Dim sec_id As Integer = 1
        Dim loadpattern_id As Integer = 1
        Dim thickness_id_slab As Integer = 1
        Dim thickness_id_wall As Integer = 100
        Dim pointload_id As Integer = 1
        Dim Material_name As String
        Dim Specific_Heat As Double
        Dim Heat_Conduction As Double
        Dim Damping_Ratio As Double
        Dim Modulus_Of_Elasticity As Double
        Dim Poisons_Ratio As Double
        Dim Thermal_Coeff As Double
        Dim Weight_Density As Double
        Dim nodes As New List(Of String)()

        Dim lineload_ct As Integer = 0
        Dim p01 As Double
        Dim p02 As Double
        Dim p03 As Double
        Dim p04 As Double
        Dim p11 As Double
        Dim p12 As Double
        Dim p13 As Double
        Dim p14 As Double
        Dim p21 As Double
        Dim p22 As Double
        Dim p23 As Double
        Dim p24 As Double
        Dim prevpart As String = "123"
        Dim point_chk As Integer = 0

        Dim lnas_chk As Integer = 0
        Dim ll_chk As Integer = 0
        line_count = 0
        ProgressBar_read.Minimum = 0
        ProgressBar_read.Maximum = lines.Length() + lines.Length() / 10
        For i_main_read = 0 To lines.Count - 1
            If line_count < lines.Length() Then
                Dim parts() As String = lines(line_count).Split(New Char() {""""}, StringSplitOptions.RemoveEmptyEntries)
                ProgressBar_read.Value = line_count
                If parts.Length > 1 Then
                    For conv = 0 To parts.Length - 1
                        parts(conv) = parts(conv).Trim()
                    Next

                    If parts(0) = "UNITS" Then
                        units.Checked = True
                        units.Enabled = True
                        If parts(3) = "MICRON" Then
                            MessageBox.Show("Length Units used in Input File are in Micron..not supported by midas GEN...Please Change the Input Units")
                            End
                        End If
                        parsing_units(parts)  ' Writes 
                    End If

                    If parts(0) = "STORY" Then
                        story.Checked = True
                        story.Enabled = True
                        Dim story_pass() As String = parts(2).Split(" ")
                        If parts(1).Length > 14 Then
                            parts(1) = parts(1)
                        End If
                        parsing_story(parts(1), story_pass(1))
                        once = 1
                    End If

                    If once = 1 And parts(0) <> "STORY" Then
                        rearrange_story(dtcrtdstoryorg)
                        once = 2
                    End If

                    If parts(0) = "POINT" Then
                        points.Checked = True
                        points.Enabled = True
                        Dim pt_pass() As String = parts(2).Split(" ")
                        Dim pt0 As Double = Convert.ToDouble(pt_pass(0))
                        Dim pt1 As Double = Convert.ToDouble(pt_pass(1))
                        pt_pass(0) = Math.Round(pt0, 3, MidpointRounding.AwayFromZero)
                        pt_pass(1) = Math.Round(pt1, 3, MidpointRounding.AwayFromZero)
                        If pt_pass.Count = 2 Then
                            dtcrtdnodeorg.Rows.Add(parts(1), pt_pass(0), pt_pass(1), 0)
                        End If
                        If pt_pass.Count = 3 Then
                            dtcrtdnodeorg.Rows.Add(parts(1), pt_pass(0), pt_pass(1), pt_pass(2))
                        End If
                        point_chk = 1
                    End If

                    If parts(0) <> "POINT" And point_chk = 1 Then
                        nodenumber = 1
                        tot_org_nodes = dtcrtdnodeorg.Rows.Count
                        For l1 = 0 To dtStorydata.Rows.Count - 1
                            For l2 = 0 To dtcrtdnodeorg.Rows.Count - 1
                                parsing_node(nodenumber, dtcrtdnodeorg.Rows(l2).Item("X1"), dtcrtdnodeorg.Rows(l2).Item("X2"), dtStorydata.Rows(l1).Item("Story_height") - dtcrtdnodeorg.Rows(l2).Item("Z_dash"), dtcrtdnodeorg.Rows(l2).Item("Node_Number_org"), dtStorydata.Rows(l1).Item("Story_name"))
                                nodenumber = nodenumber + 1
                            Next
                        Next
                        point_chk = 0
                        storydata_count = dtStorydata.Rows.Count - 1
                        node_count_infunc = dtCrtdNode.Rows.Count - 1
                    End If

                    If parts(0) = "LINE" Then
                        element_conn.Checked = True
                        element_conn.Enabled = True
                        parsing_elem_conn(parts(1), parts(3), parts(5), parts(6))
                    End If

                    If parts(0) = "LINEASSIGN" Then
                        sections.Checked = True
                        sections.Enabled = True
                        If parts(4) = "SECTION" Then
                            parsing_lineassign(parts(1), parts(3), parts(5))
                        End If

                    End If

                    If parts(0) = "POINTASSIGN" Then
                        constraints.Checked = True
                        constraints.Enabled = True
                        Dim lastnonempty As Integer = -1
                        For k As Integer = 0 To parts.Count - 1
                            If parts(k) <> "" Then
                                lastnonempty = lastnonempty + 1
                                parts(lastnonempty) = parts(k)
                            End If
                        Next
                        If lastnonempty < 0 Then
                            lastnonempty = 0
                        End If
                        ReDim Preserve parts(lastnonempty)

                        For ii = 0 To parts.Count - 1
                            parts(ii) = parts(ii).Trim
                        Next
                        If parts(3) = "RESTRAINT" Then
                            Dim dx As String = 0
                            Dim dy As String = 0
                            Dim dz As String = 0
                            Dim rx As String = 0
                            Dim ry As String = 0
                            Dim rz As String = 0

                            Dim bc_pass() As String = parts(4).Split(" ")
                            For i_bc = 0 To bc_pass.Length - 1

                                If bc_pass(i_bc) = "UX" Then
                                    dx = 1
                                End If
                                If bc_pass(i_bc) = "UY" Then
                                    dy = 1
                                End If
                                If bc_pass(i_bc) = "UZ" Then
                                    dz = 1
                                End If
                                If bc_pass(i_bc) = "RX" Then
                                    rx = 1
                                End If
                                If bc_pass(i_bc) = "RY" Then
                                    ry = 1
                                End If
                                If bc_pass(i_bc) = "RZ" Then
                                    rz = 1
                                End If
                            Next
                            parsing_pointassign(parts(1), parts(2), dx, dy, dz, rx, ry, rz)
                        End If

                        If parts(3) = "SPRINGPROP" Then
                            parsing_pointassign_spring(parts(1), parts(2), parts(4))
                        End If
                    End If

                    If parts(0) = "MATERIAL" Then
                        material.Checked = True
                        material.Enabled = True
                        Dim material_type As String = "USER"
                        If parts(3) = "Rebar" Then
                            For inline = 0 To 1 '3
                                Dim parts_inline_mat() As String = lines(line_count + inline).Split(New Char() {""""}, StringSplitOptions.RemoveEmptyEntries)
                                For conv = 0 To parts_inline_mat.Length - 1
                                    parts_inline_mat(conv) = parts_inline_mat(conv).Trim()
                                Next
                                If inline = 0 Then
                                    Material_name = parts_inline_mat(1)
                                    If Material_name.Length > 14 Then
                                        Material_name = Material_name
                                    End If
                                    Dim parts_inline_mat_split() As String = parts_inline_mat(parts.Count - 1).Split(" ")
                                    Weight_Density = parts_inline_mat_split(1)
                                End If
                                If inline = 1 Then
                                    Dim parts_inline_mat_split() As String = parts_inline_mat(parts.Count - 1).Split(New Char() {" "}, StringSplitOptions.RemoveEmptyEntries)
                                    Modulus_Of_Elasticity = parts_inline_mat_split(1)
                                    Thermal_Coeff = parts_inline_mat_split(3)
                                    Poisons_Ratio = 0.2
                                End If
                            Next
                            Specific_Heat = 0
                            Heat_Conduction = 0
                            Damping_Ratio = 0.05
                            line_count = line_count + 3
                        End If

                        If parts(3) = "Concrete" Then
                            material_type = "CONC"
                            For inline = 0 To 1 '3
                                Dim parts_inline_mat() As String = lines(line_count + inline).Split(New Char() {""""}, StringSplitOptions.RemoveEmptyEntries)
                                For conv = 0 To parts_inline_mat.Length - 1
                                    parts_inline_mat(conv) = parts_inline_mat(conv).Trim()
                                Next
                                If inline = 0 Then
                                    Material_name = parts_inline_mat(1)
                                    If Material_name.Length > 14 Then
                                        Material_name = Material_name
                                    End If
                                    Dim parts_inline_mat_split() As String = parts_inline_mat(parts.Count - 1).Split(" ")
                                    Weight_Density = parts_inline_mat_split(1)
                                End If
                                If inline = 1 Then
                                    Dim parts_inline_mat_split() As String
                                    If parts(4) = "NOTES" Then
                                        Dim parts_inline_mat1() As String = lines(line_count).Split(New Char() {""""}, StringSplitOptions.RemoveEmptyEntries)
                                        parts_inline_mat_split = parts_inline_mat1(6).Split(New Char() {" "}, StringSplitOptions.RemoveEmptyEntries)
                                        Weight_Density = parts_inline_mat_split(1)
                                    Else
                                        parts_inline_mat_split = parts_inline_mat(parts.Count - 1).Split(New Char() {" "}, StringSplitOptions.RemoveEmptyEntries)
                                        Modulus_Of_Elasticity = parts_inline_mat_split(1)
                                        Thermal_Coeff = parts_inline_mat_split(5)
                                        Poisons_Ratio = parts_inline_mat_split(3)
                                    End If

                                End If
                            Next

                            Specific_Heat = 0
                            Heat_Conduction = 0
                            Damping_Ratio = 0.05
                            line_count = line_count + 3
                        End If

                        If parts(3) = "Steel" Then
                            material_type = "STEEL"
                            For inline = 0 To 1 '3
                                Dim parts_inline_mat() As String = lines(line_count + inline).Split(New Char() {""""}, StringSplitOptions.RemoveEmptyEntries)
                                For conv = 0 To parts_inline_mat.Length - 1
                                    parts_inline_mat(conv) = parts_inline_mat(conv).Trim()
                                Next
                                If inline = 0 Then
                                    Material_name = parts_inline_mat(1)
                                    If Material_name.Length > 14 Then
                                        Material_name = Material_name
                                    End If
                                    Dim parts_inline_mat_split() As String = parts_inline_mat(parts.Count - 1).Split(" ")
                                    Weight_Density = parts_inline_mat_split(1)
                                End If
                                If inline = 1 Then
                                    Dim parts_inline_mat_split() As String = parts_inline_mat(parts.Count - 1).Split(New Char() {" "}, StringSplitOptions.RemoveEmptyEntries)
                                    Modulus_Of_Elasticity = parts_inline_mat_split(1)
                                    Thermal_Coeff = parts_inline_mat_split(5)
                                    Poisons_Ratio = parts_inline_mat_split(3)
                                End If
                            Next

                            Specific_Heat = 0
                            Heat_Conduction = 0
                            Damping_Ratio = 0.05
                            line_count = line_count + 3
                        End If

                        If parts(3) = "Tendon" Then
                            material_type = "STEEL"
                            For inline = 0 To 1 '3
                                Dim parts_inline_mat() As String = lines(line_count + inline).Split(New Char() {""""}, StringSplitOptions.RemoveEmptyEntries)
                                For conv = 0 To parts_inline_mat.Length - 1
                                    parts_inline_mat(conv) = parts_inline_mat(conv).Trim()
                                Next
                                If inline = 0 Then
                                    Material_name = parts_inline_mat(1)
                                    If Material_name.Length > 14 Then
                                        Material_name = Material_name
                                    End If
                                    Dim parts_inline_mat_split() As String = parts_inline_mat(parts.Count - 1).Split(" ")
                                    Weight_Density = parts_inline_mat_split(1)
                                End If
                                If inline = 1 Then
                                    Dim parts_inline_mat_split() As String = parts_inline_mat(parts.Count - 1).Split(New Char() {" "}, StringSplitOptions.RemoveEmptyEntries)
                                    Modulus_Of_Elasticity = parts_inline_mat_split(1)
                                    'Thermal_Coeff = parts_inline_mat_split(5)
                                    Poisons_Ratio = parts_inline_mat_split(3)
                                End If
                            Next

                            Specific_Heat = 0
                            Heat_Conduction = 0
                            Damping_Ratio = 0.05
                            line_count = line_count + 3
                        End If

                        If parts(3) = "Other" Then
                            For inline = 0 To 1 '6
                                Dim parts_inline_mat() As String = lines(line_count + inline).Split(New Char() {""""}, StringSplitOptions.RemoveEmptyEntries)
                                For conv = 0 To parts_inline_mat.Length - 1
                                    parts_inline_mat(conv) = parts_inline_mat(conv).Trim()
                                Next
                                If inline = 0 Then
                                    Material_name = parts_inline_mat(1)
                                    If Material_name.Length > 14 Then
                                        Material_name = Material_name
                                    End If
                                    Dim parts_inline_mat_split() As String = parts_inline_mat(4).Split(" ")
                                    If parts_inline_mat_split.Length < 2 Then
                                        parts_inline_mat_split = parts_inline_mat(6).Split(" ")
                                        Weight_Density = parts_inline_mat_split(1)
                                    Else
                                        Weight_Density = parts_inline_mat_split(1)
                                    End If

                                End If
                                If inline = 1 Then
                                    Dim parts_inline_mat_split() As String = parts_inline_mat(4).Split(New Char() {" "}, StringSplitOptions.RemoveEmptyEntries)
                                    Modulus_Of_Elasticity = parts_inline_mat_split(1)
                                    Thermal_Coeff = parts_inline_mat_split(5)
                                    Poisons_Ratio = parts_inline_mat_split(3)
                                End If
                            Next

                            Specific_Heat = 0
                            Heat_Conduction = 0
                            Damping_Ratio = 0.05
                            line_count = line_count + 6
                        End If
                        parsing_material(Material_id, Material_name, Specific_Heat, Heat_Conduction, Damping_Ratio, Modulus_Of_Elasticity, Poisons_Ratio, Thermal_Coeff, Weight_Density, material_type)
                        Material_id = Material_id + 1

                    End If

                    If parts(0) = "FRAMESECTION" Then
                        Dim lastnonempty As Integer = -1
                        For k As Integer = 0 To parts.Count - 1
                            If parts(k) <> "" Then
                                lastnonempty = lastnonempty + 1
                                parts(lastnonempty) = parts(k)
                            End If
                        Next
                        If lastnonempty < 0 Then
                            lastnonempty = 0
                        End If
                        ReDim Preserve parts(lastnonempty)
                        section_assignment.Checked = True
                        section_assignment.Enabled = True
                        If parts.Count > 5 Then
                            If parts(5) <> "SD Section" And parts.Count > 6 Then
                                If parts(6) <> "FILE" Then
                                    Dim parts_dim() As String = parts(6).Split(" ".ToCharArray(), StringSplitOptions.RemoveEmptyEntries)
                                    Dim parts_shape() As String = parts(5).Split(" ")
                                    If parts(1).Length > 14 Then
                                        parts(1) = parts(1)
                                    End If
                                    If parts(5) = "Concrete Circle" Then
                                        parsing_section(sec_id, parts(1), parts(3), parts_shape(0), parts(5), parts_dim(1), 0, 0, 0, 0, 0, 0, 0)
                                        sec_id = sec_id + 1
                                    ElseIf CStr(parts(5)).IndexOf("Concrete Rectangular") > -1 Then
                                        parsing_section(sec_id, parts(1), parts(3), parts_shape(0), parts(5), parts_dim(1), parts_dim(3), 0, 0, 0, 0, 0, 0)
                                        sec_id = sec_id + 1
                                    ElseIf parts(5) = "Steel I/Wide Flange" Then
                                        parsing_section(sec_id, parts(1), parts(3), parts_shape(0), parts(5), parts_dim(1), parts_dim(3), parts_dim(5), parts_dim(7), 0, 0, 0, 0)
                                        sec_id = sec_id + 1
                                    ElseIf parts(5) = "Steel Channel" Then
                                        parsing_section(sec_id, parts(1), parts(3), parts_shape(0), parts(5), parts_dim(1), parts_dim(3), parts_dim(5), parts_dim(7), 0, 0, 0, 0)
                                        sec_id = sec_id + 1
                                    ElseIf parts(5) = "Steel Tee" Then
                                        parsing_section(sec_id, parts(1), parts(3), parts_shape(0), parts(5), parts_dim(1), parts_dim(3), parts_dim(5), parts_dim(7), 0, 0, 0, 0)
                                        sec_id = sec_id + 1
                                    ElseIf parts(5) = "Steel Angle" Then
                                        parsing_section(sec_id, parts(1), parts(3), parts_shape(0), parts(5), parts_dim(1), parts_dim(3), parts_dim(5), parts_dim(7), 0, 0, 0, 0)
                                        sec_id = sec_id + 1
                                    ElseIf parts(5) = "Steel Double Channel" Then
                                        parsing_section(sec_id, parts(1), parts(3), parts_shape(0), parts(5), parts_dim(1), parts_dim(3), parts_dim(5), parts_dim(7), parts_dim(9), 0, 0, 0)
                                        sec_id = sec_id + 1
                                    ElseIf parts(5) = "Steel Double Angle" Then
                                        parsing_section(sec_id, parts(1), parts(3), parts_shape(0), parts(5), parts_dim(1), parts_dim(3), parts_dim(5), parts_dim(7), parts_dim(9), 0, 0, 0)
                                        sec_id = sec_id + 1
                                    ElseIf parts(5) = "Steel Pipe" Then
                                        parsing_section(sec_id, parts(1), parts(3), parts_shape(0), parts(5), parts_dim(1), parts_dim(3), 0, 0, 0, 0, 0, 0)
                                        sec_id = sec_id + 1
                                    ElseIf CStr(parts(5)).IndexOf("Concrete Encasement Rectangle") > -1 Then
                                        parsing_section(sec_id, parts(1), parts(3), parts_shape(0), parts(5), parts_dim(1), parts_dim(3), 0, 0, 0, 0, 0, 0)
                                        sec_id = sec_id + 1
                                    ElseIf CStr(parts(5)).IndexOf("Filled Steel Tube") > -1 Then
                                        parsing_section(sec_id, parts(1), parts(3), parts_shape(0), parts(5), parts_dim(1), parts_dim(3), parts_dim(5), parts_dim(7), 0, 0, 0, 0)
                                        sec_id = sec_id + 1
                                    ElseIf CStr(parts(5)).IndexOf("Filled Steel Pipe") > -1 Then
                                        parsing_section(sec_id, parts(1), parts(3), parts_shape(0), parts(5), parts_dim(1), parts_dim(3), 0, 0, 0, 0, 0, 0)
                                        sec_id = sec_id + 1
                                    ElseIf CStr(parts(5)).IndexOf("Steel Tube") > -1 Then
                                        parsing_section(sec_id, parts(1), parts(3), parts_shape(0), parts(5), parts_dim(1), parts_dim(3), parts_dim(5), parts_dim(7), 0, 0, 0, 0)
                                        sec_id = sec_id + 1
                                    Else
                                        parsing_section(sec_id, parts(1), parts(3), parts_shape(0), parts(5), parts_dim(1), parts_dim(3), 0, 0, 0, 0, 0, 0)
                                        sec_id = sec_id + 1
                                    End If
                                Else
                                    parsing_section(sec_id, parts(1), parts(3), "Steel", "Undefined", 0.1, 0.1, 0, 0, 0, 0, 0, 0)
                                    sec_id = sec_id + 1
                                End If
                            Else
                                parsing_section(sec_id, parts(1), "STEEL", "Steel", "Undefined", 0.1, 0.1, 0, 0, 0, 0, 0, 0)
                                sec_id = sec_id + 1
                            End If

                        ElseIf parts.Count = 3 Then
                            parsing_modifier(parts(1), parts(2))
                        Else
                            parsing_section(sec_id, parts(1), "Steel", "Steel", "Undefined", 0.1, 0.1, 0, 0, 0, 0, 0, 0)
                            sec_id = sec_id + 1
                        End If
                    End If

                    If parts(0) = "LOADPATTERN" Then
                        load_pattern.Checked = True
                        load_pattern.Enabled = True
                        parsing_loadpattern(loadpattern_id, parts(1), parts(3))
                        loadpattern_id = loadpattern_id + 1
                    End If

                    If parts(0) = "POINTLOAD" Then
                        point_loads.Checked = True
                        point_loads.Enabled = True
                        Dim lastnonempty As Integer = -1
                        For k As Integer = 0 To parts.Count - 1
                            If parts(k) <> "" Then
                                lastnonempty = lastnonempty + 1
                                parts(lastnonempty) = parts(k)
                            End If
                        Next
                        If lastnonempty < 0 Then
                            lastnonempty = 0
                        End If
                        ReDim Preserve parts(lastnonempty)
                        parsing_pointload(pointload_id, parts(1), parts(2), parts(6), parts(7))
                        pointload_id = pointload_id + 1
                    End If

                    If parts(0) = "LINELOAD" Then
                        line_loads.Checked = True
                        line_loads.Enabled = True
                        If lnas_chk = 0 Then
                            rearrange_elem()
                            lnas_chk = 1
                            ll_chk = 1
                        End If
                        Dim lastnonempty As Integer = -1
                        For k As Integer = 0 To parts.Count - 1
                            If parts(k) <> "" Then
                                lastnonempty = lastnonempty + 1
                                parts(lastnonempty) = parts(k)
                            End If
                        Next
                        If lastnonempty < 0 Then
                            lastnonempty = 0
                        End If
                        ReDim Preserve parts(lastnonempty)

                        If parts(4) = "POINTF" Then
                            Dim parts_brk() As String = parts(9).Split(" ".ToCharArray(), StringSplitOptions.RemoveEmptyEntries)
                            parsing_lineload(parts(1), parts(2), parts(8), parts(6), parts_brk(1), 0, parts_brk(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, "CONLOAD")
                        End If
                        If parts(4) = "UNIFF" Then
                            Dim parts_brk() As String = parts(9).Split(" ".ToCharArray(), StringSplitOptions.RemoveEmptyEntries)
                            parsing_lineload(parts(1), parts(2), parts(8), parts(6), parts_brk(1), parts_brk(1), 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, "UNILOAD")
                        End If
                        If parts(4) = "TRAPF" Then
                            Dim parts_brk() As String = parts(9).Split(" ".ToCharArray(), StringSplitOptions.RemoveEmptyEntries)

                            If parts(1) = prevpart Or lineload_ct = 0 Then
                                If lineload_ct = 0 Then
                                    p01 = parts_brk(1)
                                    p02 = parts_brk(3)
                                    p03 = parts_brk(5)
                                    p04 = parts_brk(7)
                                    prevpart = parts(1)
                                End If
                                If lineload_ct = 1 Then
                                    p11 = parts_brk(1)
                                    p12 = parts_brk(3)
                                    p13 = parts_brk(5)
                                    p14 = parts_brk(7)

                                End If
                                If lineload_ct = 2 Then
                                    p21 = parts_brk(1)
                                    p22 = parts_brk(3)
                                    p23 = parts_brk(5)
                                    p24 = parts_brk(7)

                                End If
                                lineload_ct = lineload_ct + 1
                            End If
                            If parts(1) <> prevpart And lineload_ct > 0 Then
                                If lineload_ct = 3 Then
                                    parsing_lineload(parts(1), parts(2), parts(8), parts(6), p01, p02, p03, p04, p11, p12, p13, p14, p21, p22, p23, p24, "UNILOAD")
                                    lineload_ct = 0
                                End If
                                If lineload_ct = 2 Then
                                    parsing_lineload(parts(1), parts(2), parts(8), parts(6), p01, p02, p03, p04, p11, p12, p13, p14, 0, 0, 0, 0, "UNILOAD")
                                    lineload_ct = 0
                                End If
                                If lineload_ct = 1 Then
                                    parsing_lineload(parts(1), parts(2), parts(8), parts(6), p01, p02, p03, p04, 0, 0, 0, 0, 0, 0, 0, 0, "UNILOAD")
                                    lineload_ct = 0
                                End If
                                prevpart = parts(1)
                                line_count = line_count - 1
                            End If
                        End If
                    End If

                    If parts(0) = "AREAASSIGN" Then
                        area_ass.Checked = True
                        area_ass.Enabled = True
                        Dim lastnonempty As Integer = -1
                        For k As Integer = 0 To parts.Count - 1
                            If parts(k) <> "" Then
                                lastnonempty = lastnonempty + 1
                                parts(lastnonempty) = parts(k)
                            End If
                        Next
                        If lastnonempty < 0 Then
                            lastnonempty = 0
                        End If
                        ReDim Preserve parts(lastnonempty)

                        parsing_areaassign(parts(1), parts(2), parts(4))
                    End If

                    If parts(0) = "AREA" Then
                        area_conn.Checked = True
                        area_conn.Enabled = True
                        Dim lastnonempty As Integer = -1
                        For k As Integer = 0 To parts.Count - 1
                            If parts(k) <> "" Then
                                lastnonempty = lastnonempty + 1
                                parts(lastnonempty) = parts(k)
                            End If
                        Next
                        If lastnonempty < 0 Then
                            lastnonempty = 0
                        End If
                        ReDim Preserve parts(lastnonempty)

                        Dim p_split() As String = parts(2).Split(" ".ToCharArray(), StringSplitOptions.RemoveEmptyEntries)
                        Dim nn As Integer = p_split(1)

                        For i_area = 0 To nn - 1
                            nodes.Add(parts(3 + i_area))
                        Next
                        Dim nodes_array As String() = nodes.ToArray()
                        If nodes_array.Count <= 4 Then
                            parsing_area_conn(parts(1), nodes_array, parts(3 + nn), 1) ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
                        Else
                            ' Dim points() As PointF
                            Dim m_Points() As PointF = {}
                            Dim rn As Integer = 0
                            For j = 0 To nodes_array.Count - 1
                                rn = 0
                                For Each row As DataRow In dtcrtdnodeorg.Rows
                                    If nodes_array(j) = dtcrtdnodeorg.Rows(rn).Item("Node_Number_org") Then
                                        AddVertex(CSng(dtcrtdnodeorg.Rows(rn).Item("X1")), CSng(dtcrtdnodeorg.Rows(rn).Item("X2")), 0)
                                        ReDim Preserve m_Points(nodes_array.Count)
                                        m_Points(j) = New PointF(CSng(dtcrtdnodeorg.Rows(rn).Item("X1")), CSng(dtcrtdnodeorg.Rows(rn).Item("X2")))
                                    End If
                                    rn = rn + 1
                                Next
                            Next

                            Dim nodes_ind As New List(Of String)()
                            Dim node_string() As String = CalculateTriangles()
                            For k = 0 To node_string.Count - 1
                                Dim nodes_array_index() As String = node_string(k).Split(",")
                                Dim chk_inside As Integer = 1
                                If node_string.Count > nodes_array.Count - 2 Then
                                    chk_inside = 0
                                    Dim cgx As Single = 0
                                    Dim cgy As Single = 0
                                    Dim chk_1 As Integer = 0
                                    Dim chk_2 As Integer = 0
                                    Dim chk_3 As Integer = 0
                                    For lp_var = 0 To dtcrtdnodeorg.Rows.Count - 1
                                        If nodes_array(nodes_array_index(0)) = dtcrtdnodeorg.Rows(lp_var).Item("Node_Number_org") Then
                                            cgx = cgx + dtcrtdnodeorg.Rows(lp_var).Item("X1") / 3
                                            cgy = cgy + dtcrtdnodeorg.Rows(lp_var).Item("X2") / 3
                                            chk_1 = 1
                                        End If
                                        If nodes_array(nodes_array_index(1)) = dtcrtdnodeorg.Rows(lp_var).Item("Node_Number_org") Then
                                            cgx = cgx + dtcrtdnodeorg.Rows(lp_var).Item("X1") / 3
                                            cgy = cgy + dtcrtdnodeorg.Rows(lp_var).Item("X2") / 3
                                            chk_2 = 2
                                        End If
                                        If nodes_array(nodes_array_index(2)) = dtcrtdnodeorg.Rows(lp_var).Item("Node_Number_org") Then
                                            cgx = cgx + dtcrtdnodeorg.Rows(lp_var).Item("X1") / 3
                                            cgy = cgy + dtcrtdnodeorg.Rows(lp_var).Item("X2") / 3
                                            chk_3 = 3
                                        End If
                                        If chk_1 = 1 And chk_2 = 1 And chk_3 = 1 Then
                                            Exit For
                                        End If
                                    Next
                                    Dim return_chk As Boolean = PointInPolygon(m_Points, cgx, cgy)
                                    If return_chk = True Then
                                        chk_inside = 1
                                    Else
                                        chk_inside = 0
                                    End If
                                End If
                                If chk_inside = 1 Then
                                    For i_ind = 0 To 2
                                        nodes_ind.Add(nodes_array(nodes_array_index(i_ind)))
                                    Next
                                End If
                                Dim nodes_array_ind As String() = nodes_ind.ToArray()
                                Dim conc_check As Integer = 0
                                conc_check = straight_line_check(nodes_array_ind)
                                If conc_check = 1 Then
                                    parsing_area_conn(parts(1), nodes_array_ind, parts(3 + nn), 1)
                                End If

                                nodes_ind.Clear()
                            Next
                            EmptyVertexList()
                        End If
                        nodes.Clear()
                    End If

                    If parts(0) = "SHELLPROP" Then
                        thicknesses.Checked = True
                        thicknesses.Enabled = True
                        If parts.Count > 8 Then
                            If parts(3) = "Slab" Then
                                Dim th_parts() As String = parts(parts.Count - 1).Split(" ".ToCharArray(), StringSplitOptions.RemoveEmptyEntries)
                                parsing_thickness(thickness_id_slab, parts(1), parts(5), th_parts(1))
                                thickness_id_slab = thickness_id_slab + 1
                            End If
                            If parts(3) = "Wall" Then
                                Dim th_parts() As String = parts(parts.Count - 1).Split(" ".ToCharArray(), StringSplitOptions.RemoveEmptyEntries)
                                parsing_thickness(thickness_id_wall, parts(1), parts(5), th_parts(1))
                                thickness_id_wall = thickness_id_wall + 1
                            End If
                        End If
                    End If

                    'If line_count > 56700 Then
                    '    MessageBox.Show("BDIYHSB")
                    'End If

                    If parts(0) = "AREALOAD" Then
                        area_loading.Checked = True
                        area_loading.Enabled = True
                        Dim lastnonempty As Integer = -1
                        For k As Integer = 0 To parts.Count - 1
                            If parts(k) <> "" Then
                                lastnonempty = lastnonempty + 1
                                parts(lastnonempty) = parts(k)
                            End If
                        Next
                        If lastnonempty < 0 Then
                            lastnonempty = 0
                        End If
                        ReDim Preserve parts(lastnonempty)
                        If parts.Count > 8 Then
                            Dim prt_brk() As String = parts(9).Split(" ".ToCharArray(), StringSplitOptions.RemoveEmptyEntries)
                            parsing_areaload(parts(1), parts(2), parts(4), parts(6), parts(8), prt_brk(1))
                        End If
                        If parts.Count = 6 And parts(4) = "UNIFLOADSET" Then
                            For i_ld = 0 To dt_loadset.Rows.Count - 1
                                If dt_loadset.Rows(i_ld).Item("Loadset_name") = parts(5) Then
                                    parsing_areaload(parts(1), parts(2), "UNIFF", "GRAV", dt_loadset.Rows(i_ld).Item("Loadset_pattern"), dt_loadset.Rows(i_ld).Item("Loadset_magnitude"))
                                End If

                            Next

                        End If
                    End If

                    If parts(0) = "SHELLUNIFORMLOADSET" Then
                        unifloadset.Enabled = True
                        unifloadset.Checked = True
                        Dim lastnonempty As Integer = -1
                        For k As Integer = 0 To parts.Count - 1
                            If parts(k) <> "" Then
                                lastnonempty = lastnonempty + 1
                                parts(lastnonempty) = parts(k)
                            End If
                        Next
                        If lastnonempty < 0 Then
                            lastnonempty = 0
                        End If
                        ReDim Preserve parts(lastnonempty)
                        Dim parts_break() As String = parts(4).Split(" ".ToCharArray(), StringSplitOptions.RemoveEmptyEntries)
                        parsing_loadset(parts(1), parts(3), parts_break(1))
                    End If

                    If parts(0) = "POINTSPRING" Then
                        constraints.Checked = True
                        constraints.Enabled = True
                        parsing_pointsprings(parts(1), parts(2))
                    End If

                End If
                line_count = line_count + 1
            End If
            Application.DoEvents()
        Next i_main_read

        out_path = in_path & "\" & only_file_name & ".mgt"

        '    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''JUST CHECKING''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        'out_path_2 = in_path & "org.txt"
        'Using out_file_2 As New StreamWriter(out_path_2)
        '    For Each row As DataRow In dtarea_conn.Rows
        '        out_file_2.WriteLine(row("N1") & ", " & row("N2") & ", " & row("N3") & ", " & row("N4"))
        '    Next

        '    '    For Each row As DataRow In dtcrtdlineassign.Rows
        '    '        out_file_2.WriteLine(row("la_uq_elem") & ", " & row("la_story") & ", " & row("la_section"))
        '    '    Next

        '    '    For Each row As DataRow In dtStorydata.Rows
        '    '        out_file_2.WriteLine(row("la_uq_elem") & ", " & row("la_story") & ", " & row("la_section"))
        '    '    Next

        'End Using
        '    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''END CHECKING'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        If ll_chk = 0 Then
            rearrange_elem()
            ll_chk = 1
        End If

        elem_section()
        area_element()

        If dtboundary_conditions.Rows.Count = 0 Then
            MessageBox.Show("Boundary Conditions Should be given by the User. Press OK to Continue file writting")
        End If
        ProgressBar_read.Value = ProgressBar_read.Maximum
        Using out_file As New StreamWriter(out_path)
            ProgressBar_writing.Minimum = 0
            ProgressBar_writing.Maximum = 10
            writing_units(out_file)
            ProgressBar_writing.Value = 1
            Application.DoEvents()
            writing_node(out_file)
            ProgressBar_writing.Value = 2
            Application.DoEvents()
            writing_elem(out_file)
            ProgressBar_writing.Value = 3
            Application.DoEvents()
            'writing_story(out_file)
            writing_BoundaryConditions(out_file)
            writting_spring(out_file)
            ProgressBar_writing.Value = 4
            Application.DoEvents()
            writing_material(out_file)
            ProgressBar_writing.Value = 5
            Application.DoEvents()
            writing_thickness(out_file)
            ProgressBar_writing.Value = 6
            Application.DoEvents()
            writing_section(out_file)
            ProgressBar_writing.Value = 7
            Application.DoEvents()
            writing_modifier(out_file)
            ProgressBar_writing.Value = 8
            Application.DoEvents()
            writing_loadpattern(out_file)
            ProgressBar_writing.Value = 9
            Application.DoEvents()
            writing_load(out_file)
            ProgressBar_writing.Value = 10
            Application.DoEvents()
            'writing_floadtype(out_file)
            ' areaload_floorload()
            'writing_floorload(out_file)
            MessageBox.Show("Writting Completed." & vbNewLine & "Location :  " & CStr(out_path))

            Process.Start(out_path)
        End Using
        delete_db()
    End Function
    Private Sub browse_button_Click(sender As Object, e As EventArgs) Handles browse_button.Click
        ' MessageBox.Show("Make sure all the elements are USER DEFINED")
        OpenFileDialog.Title = "Enter the input file"
        OpenFileDialog.Filter = "ETABS Text Files (*.$et, *e2k)|*.$et;*.e2k|SAFE Files (*.$ft, *f2k)|*.$ft;*.f2k|All Files (*.*)|*.*"
        OpenFileDialog.ShowDialog()
        file_name = OpenFileDialog.FileName()
        extension = Path.GetExtension(file_name) '''''''
        If file_name <> "NO_FILE_SELECTED" Then
            path_disp.Text = file_name
            in_path = Path.GetDirectoryName(file_name)
            only_file_name = Path.GetFileNameWithoutExtension(file_name) ' Limited extension
            If extension = ".$et" Or extension = ".e2k" Or extension = ".$ET" Or extension = ".E2K" Then
                lines = File.ReadAllLines(file_name)
                '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
            ElseIf extension = ".$ft" Or extension = ".f2k" Or extension = ".$FT" Or extension = ".F2K" Then
                lines = Split(File.ReadAllText(file_name), "TABLE:")

                '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
            End If
            nodenumber = 1
            elementnumber = 1

        End If
            Application.DoEvents()
    End Sub

    Function SAFE()
        FileOpen(2, "Hello.mgt", OpenMode.Output)
        Dim words() As String = lines  ''remove and keep direct lines
        Dim temp As String = ""
        For a = 0 To words.Length - 1
            If words(a).Contains("""PROGRAM CONTROL""") Then
                temp = words(a).Remove(0, 15)
                writeUnits(2, temp, "\bCurrUnits=\s*""\s*(.*)\s*""\s*MergeTol\b")
            End If
        Next
    End Function

    ''' SAFE FUNCTIONS
    Function writeUnits(ByVal s As Integer, ByVal str As String, ByVal patt As String)
        Dim text As String = str
        Dim pattern As String = patt '"\bCurrUnits=(.*)MergeTol\b"
        ' Instantiate the regular expression object.
        Dim r As Regex = New Regex(pattern, RegexOptions.IgnoreCase)
        Dim m As Match = r.Match(text)
        Dim g As Group = m.Groups(1)
        If m.Success Then
            Dim words() As String = g.ToString().Split(New Char() {","c})

            'text = words(0) + "," + words(1) + "," + " BTU" + "," + words(2)
            'PrintLine(s, text)
            'PrintLine(s)
        End If
    End Function
    ''' SAFE FUNTIONS ENDS



    Public Function parsing_node(ByVal nodenumber As Integer, ByVal pt_x As String, ByVal pt_y As String, ByVal story_height As String, ByVal node_org As String, ByVal story_name As String)
        If story_height = 0 Then
            dtCrtdNode.Rows.Add(nodenumber, pt_x, pt_y, story_height, 1, node_org, story_name)
        Else
            dtCrtdNode.Rows.Add(nodenumber, pt_x, pt_y, story_height, 0, node_org, story_name)
        End If
    End Function

    Public Function parsing_elem_conn(ByVal ele_name As String, ByVal i_end As String, ByVal j_end As String, ByVal flr_var As String)
        dtCrtdElem_conn.Rows.Add(elementnumber, ele_name, i_end, j_end, flr_var)
        elementnumber = elementnumber + 1
    End Function

    Public Function parsing_lineassign(ByVal line_name As String, ByVal story_name As String, ByVal sec_name As String)
        dtcrtdlineassign.Rows.Add(line_name, story_name, sec_name)
    End Function

    Public Function parsing_story(ByVal st_name As String, ByVal st_height As String)
        dtcrtdstoryorg.Rows.Add(st_name, st_height)
    End Function

    Public Function parsing_pointassign(ByVal node As String, ByVal story As String, ByVal dx As String, ByVal dy As String, ByVal dz As String, ByVal rx As String, ByVal ry As String, ByVal rz As String)
        Dim node_pass As String = 0
        node_pass = func_node_converter(node, story)
        If node_pass <> 0 Then
            dtboundary_conditions.Rows.Add(node_pass, dx, dy, dz, rx, ry, rz)
        End If

    End Function

    Public Function parsing_material(ByVal Material_id As Integer, ByVal material_name As String, ByVal Specific_Heat As Double, ByVal Heat_Conduction As Double, ByVal Damping_Ratio As Double, ByVal Modulus_Of_Elasticity As Double, ByVal Poisons_Ratio As Double, ByVal Thermal_Coeff As Double, ByVal Weight_Density As Double, ByVal material_type As String)
        dtMatgrade.Rows.Add(Material_id, material_name, Specific_Heat, Heat_Conduction, Damping_Ratio, Modulus_Of_Elasticity, Poisons_Ratio, Thermal_Coeff, Weight_Density, material_type)
    End Function

    Public Function parsing_section(ByVal sec_id As Integer, ByVal sec_name As String, ByVal sec_mat As String, ByVal sec_mat_name As String, ByVal sec_shape As String, ByVal d1 As Double, ByVal d2 As Double, ByVal d3 As Double, ByVal d4 As Double, ByVal d5 As Double, ByVal d6 As Double, ByVal d7 As Double, ByVal d8 As Double)
        If sec_shape = "Concrete Circle" Then
            sec_shape = "SR"
            dtProSection.Rows.Add(sec_id, sec_name, sec_mat, sec_mat_name, sec_shape, d1, 0, 0, 0, 0, 0, 0, 0)
        ElseIf sec_shape = "Steel I/Wide Flange" Then
            sec_shape = "H"
            dtProSection.Rows.Add(sec_id, sec_name, sec_mat, sec_mat_name, sec_shape, d1, d2, d4, d3, d2, d3, 0, 0)
        ElseIf sec_shape = "Steel Channel" Then
            sec_shape = "C"
            dtProSection.Rows.Add(sec_id, sec_name, sec_mat, sec_mat_name, sec_shape, d1, d2, d4, d3, d2, d3, 0, 0)
        ElseIf sec_shape = "Steel Tee" Then
            sec_shape = "T"
            dtProSection.Rows.Add(sec_id, sec_name, sec_mat, sec_mat_name, sec_shape, d1, d2, d4, d3, d2, d3, 0, 0)
        ElseIf sec_shape = "Steel Angle" Then
            sec_shape = "L"
            dtProSection.Rows.Add(sec_id, sec_name, sec_mat, sec_mat_name, sec_shape, d1, d2, d4, d3, 0, 0, 0, 0)
        ElseIf sec_shape = "Steel Double Angle" Then
            sec_shape = "2L"
            dtProSection.Rows.Add(sec_id, sec_name, sec_mat, sec_mat_name, sec_shape, d1, d2, d4, d3, d5, 0, 0, 0)
        ElseIf sec_shape = "Steel Double Channel" Then
            sec_shape = "2C"
            dtProSection.Rows.Add(sec_id, sec_name, sec_mat, sec_mat_name, sec_shape, d1, d2, d4, d3, d5, 0, 0, 0)
            'ElseIf sec_shape = "Steel Tube" Then
            '    sec_shape = "H"
            '    dtProSection.Rows.Add(sec_id, sec_name, sec_mat, sec_mat_name, sec_shape, d1, d2, d4, d3, d5, d6, 0, 0)
        ElseIf sec_shape = "Steel Pipe" Then
            sec_shape = "P"
            dtProSection.Rows.Add(sec_id, sec_name, sec_mat, sec_mat_name, sec_shape, d1, d2, 0, 0, 0, 0, 0, 0)
            'ElseIf sec_shape = "Filled Steel Tube" Then
            '    sec_shape = "H"
            '    dtProSection.Rows.Add(sec_id, sec_name, sec_mat, sec_mat_name, sec_shape, d1, d2, d4, d3, d5, d6, 0, 0)
            'ElseIf sec_shape = "Filled Steel Pipe" Then
            '    sec_shape = "H"
            '    dtProSection.Rows.Add(sec_id, sec_name, sec_mat, sec_mat_name, sec_shape, d1, d2, d4, d3, d5, d6, 0, 0)
        ElseIf sec_shape = "Concrete Rectangular" Then
            sec_shape = "SB"
            dtProSection.Rows.Add(sec_id, sec_name, sec_mat, sec_mat_name, sec_shape, d1, d2, d4, d3, d5, d6, 0, 0)
        ElseIf sec_shape = "Steel Box" Then
            sec_shape = "B"
            dtProSection.Rows.Add(sec_id, sec_name, sec_mat, sec_mat_name, sec_shape, d1, d2, d4, d3, 0, d3, 0, 0)
        ElseIf sec_shape = "Filled" Then
            sec_shape = "B"
            dtProSection.Rows.Add(sec_id, sec_name, sec_mat, sec_mat_name, sec_shape, d1, d2, d4, d3, 0, d3, 0, 0)
        ElseIf sec_shape = "Concrete Encasement Rectangle" Then
            sec_shape = "SB"
            dtProSection.Rows.Add(sec_id, sec_name, sec_mat, sec_mat_name, sec_shape, d1, d2, d4, d3, d5, d6, 0, 0)
        ElseIf sec_shape = "Filled Steel Tube" Or sec_shape = "Steel Tube" Then
            sec_shape = "SB"
            dtProSection.Rows.Add(sec_id, sec_name, sec_mat, sec_mat_name, sec_shape, d1, d2, d4, d3, d5, d6, 0, 0)
        ElseIf sec_shape = "Filled Steel Pipe" Then
            sec_shape = "SB"
            dtProSection.Rows.Add(sec_id, sec_name, sec_mat, sec_mat_name, sec_shape, d1, d2, d4, d3, d5, d6, 0, 0)
        Else
            sec_shape = "SB"
            dtProSectionUndef.Rows.Add(sec_id, sec_name, sec_mat_name)
            sec_name = sec_name + "*"
            dtProSection.Rows.Add(sec_id, sec_name, sec_mat, sec_mat_name, sec_shape, d1, d2, 0, 0, 0, 0, 0, 0)

        End If
    End Function
    'Dim sec_id_mod As Integer = 0
    Public Function parsing_modifier(ByVal sec_name As String, ByVal mods As String)
        Dim mod_brk() As String = mods.Split(New Char() {" "}, StringSplitOptions.RemoveEmptyEntries)

        For l1 = 0 To dtProSection.Rows.Count - 1
            If sec_name = dtProSection.Rows(l1).Item("Section_name") Or CStr(sec_name + "*") = dtProSection.Rows(l1).Item("Section_name") Then
                'sec_id_mod = sec_id_mod + 1
                Dim area_sf As String = "1"
                Dim asy_sf As String = "1"
                Dim asz_sf As String = "1"
                Dim ixx_sf As String = "1"
                Dim iyy_sf As String = "1"
                Dim izz_sf As String = "1"
                Dim wgt_sf As String = "1"
                For i = 0 To mod_brk.Count - 1 Step 2
                    mod_brk(i) = mod_brk(i).Trim
                    If mod_brk(i) = "AMOD" Then
                        area_sf = mod_brk(i + 1)
                    ElseIf mod_brk(i) = "A2MOD" Then
                        asy_sf = mod_brk(i + 1)
                    ElseIf mod_brk(i) = "A3MOD" Then
                        asz_sf = mod_brk(i + 1)
                    ElseIf mod_brk(i) = "JMOD" Then
                        ixx_sf = mod_brk(i + 1)
                    ElseIf mod_brk(i) = "I2MOD" Then
                        iyy_sf = mod_brk(i + 1)
                    ElseIf mod_brk(i) = "I3MOD" Then
                        izz_sf = mod_brk(i + 1)
                    ElseIf mod_brk(i) = "WMOD" Then
                        wgt_sf = mod_brk(i + 1)
                    End If
                Next
                dtmodifier.Rows.Add(dtProSection.Rows(l1).Item("Section_id"), area_sf, asy_sf, asz_sf, ixx_sf, iyy_sf, izz_sf, "1", wgt_sf)
            End If
        Next
    End Function

    Public Function parsing_loadpattern(ByVal lp_id As Integer, ByVal pattern_name As String, ByVal pattern_type As String)                 'JUST CHECK IF THE LOAD PATTERNS ARE MATCHING WITH ETABS INPUT FILE
        If pattern_type = "Dead" Then
            pattern_type = "D"
        ElseIf pattern_type = "Live" Then
            pattern_type = "L"
        ElseIf pattern_type = "Wind" Then
            pattern_type = "W"
        ElseIf pattern_type = "Seismic" Then
            pattern_type = "E"
        ElseIf pattern_type = "Other" Then
            pattern_type = "USER"
        ElseIf pattern_type = "Roof Live" Then
            pattern_type = "LR"
        ElseIf pattern_type = "Snow" Then
            pattern_type = "S"
        ElseIf pattern_type = "Construction" Then
            pattern_type = "CS"
        ElseIf pattern_type = "Super dead" Then
            pattern_type = "D"
        Else
            pattern_type = "USER"
        End If
        dtload_pattern.Rows.Add(lp_id, pattern_name, pattern_type)
    End Function

    Public Function parsing_pointload(ByVal p_id As Integer, ByVal node As Integer, ByVal story As String, ByVal load_name As String, ByVal prtid As String)
        Dim node_pass As String
        Dim n As Integer = 0
        Dim FX_V As Double
        Dim FY_V As Double
        Dim FZ_V As Double
        Dim MX_V As Double
        Dim MY_V As Double
        Dim MZ_V As Double
        node_pass = func_node_converter(node, story)
        Dim prtid_1() As String = prtid.Split(" ".ToCharArray(), StringSplitOptions.RemoveEmptyEntries)

        For i = 0 To prtid_1.Count - 1 Step 2
            If prtid_1(i) = "FX" Then
                FX_V = prtid_1(i + 1)
            End If
            If prtid_1(i) = "FY" Then
                FY_V = prtid_1(i + 1)
            End If
            If prtid_1(i) = "FZ" Then
                FZ_V = prtid_1(i + 1)
            End If
            If prtid_1(i) = "MX" Then
                MX_V = prtid_1(i + 1)
            End If
            If prtid_1(i) = "MX" Then
                MY_V = prtid_1(i + 1)
            End If
            If prtid_1(i) = "MX" Then
                MZ_V = prtid_1(i + 1)
            End If
        Next
        dtNodalLoads.Rows.Add(p_id, node_pass, FX_V, FY_V, FZ_V, MX_V, MY_V, MZ_V, load_name)
    End Function

    Public Function parsing_lineload(ByVal ele_type As String, ByVal story As String, ByVal lc_name As String, ByVal lc_dir As String, ByVal p01 As String, ByVal p02 As String, ByVal p03 As Double, ByVal p04 As Double, ByVal p11 As String, ByVal p12 As String, ByVal p13 As String, ByVal p14 As String, ByVal p21 As String, ByVal p22 As String, ByVal p23 As Double, ByVal p24 As Double, ByVal tp_to_prt As String)
        Dim ele_number_pass As Integer
        Dim d1 As Double
        Dim p1 As Double
        Dim d2 As Double
        Dim p2 As Double
        Dim d3 As Double
        Dim p3 As Double
        Dim d4 As Double
        Dim p4 As Double
        Dim proj As String = "NO"
        ele_number_pass = func_element_converter(ele_type, story)
        If lc_dir = "GRAV" Then
            lc_dir = "GZ"
            p01 = -p01
            p02 = -p02
            p21 = -p21
            p22 = -p22
        End If
        If lc_dir = "XPROJ" Then
            lc_dir = "GX"
            proj = "YES"
        End If
        If lc_dir = "YPROJ" Then
            lc_dir = "GY"
            proj = "YES"
        End If
        If lc_dir = "GRAVPROJ" Then
            lc_dir = "GZ"
            p01 = -p01
            p02 = -p02
            p21 = -p21
            p22 = -p22
            proj = "YES"
        End If
        If lc_dir = "1" Then
            lc_dir = "LX"
        End If
        If lc_dir = "2" Then
            lc_dir = "LZ"
        End If
        If lc_dir = "3" Then
            lc_dir = "LY"
            p01 = -p01
            p02 = -p02
            p21 = -p21
            p22 = -p22
        End If
        If lc_dir = "X" Then
            lc_dir = "GX"
        End If
        If lc_dir = "Y" Then
            lc_dir = "GY"
        End If

        d1 = Math.Round(p03, 1, MidpointRounding.AwayFromZero)
        p1 = p01
        d2 = Math.Round(p04, 1, MidpointRounding.AwayFromZero)
        p2 = p02
        d3 = Math.Round(p23, 1, MidpointRounding.AwayFromZero)
        p3 = p21
        d4 = Math.Round(p24, 1, MidpointRounding.AwayFromZero)
        p4 = p22

        If ele_number_pass <> 0 Then
            dtbeam_loads.Rows.Add(ele_number_pass, lc_dir, d1, p1, d2, p2, d3, p3, d4, p4, lc_name, tp_to_prt, proj)
        End If
    End Function

    Public Function parsing_areaassign(ByVal area_name As String, ByVal area_story As String, ByVal area_section As String)
        dtarea_assign.Rows.Add(area_name, area_story, area_section)
    End Function

    Public Function parsing_area_conn(ByVal area_name As String, ByVal node_us() As String, ByVal floor_Chk As String, ByVal chker As Integer)
        If node_us.Count = 3 Then
            dtarea_conn.Rows.Add(elementnumber, 0, 0, node_us(0), node_us(1), node_us(2), 0, 1, 0, area_name, floor_Chk, chker)
            elementnumber = elementnumber + 1
        End If
        If node_us.Count = 4 Then
            dtarea_conn.Rows.Add(elementnumber, 0, 0, node_us(0), node_us(1), node_us(2), node_us(3), 1, 0, area_name, floor_Chk, chker)
            elementnumber = elementnumber + 1
        End If

    End Function

    Public Function parsing_thickness(ByVal th_id As String, ByVal th_name As String, ByVal th_mat As String, ByVal th_depth As String)
        dtthickness.Rows.Add(th_id, th_name, th_mat, th_depth)

    End Function

    Public Function parsing_areaload(ByVal Area_name As String, ByVal Area_story As String, ByVal Area_type As String, ByVal Area_dir As String, ByVal Area_loadcase As String, ByVal Area_load_mag As String)
        dt_area_load_etabs.Rows.Add(Area_name, Area_story, Area_type, Area_dir, Area_loadcase, Area_load_mag)
    End Function

    Public Function parsing_loadset(ByVal ld_name As String, ByVal ld_pat As String, ByVal ld_mag As String)
        dt_loadset.Rows.Add(ld_name, ld_pat, ld_mag)
    End Function

    Public Function parsing_pointsprings(ByVal sp_name As String, ByVal sp_val As String)
        sp_val = sp_val.Trim()
        Dim sp_val_brk As String() = sp_val.Split(" ".ToCharArray, StringSplitOptions.RemoveEmptyEntries)
        Dim p_ux As String = "1e+014"
        Dim p_uy As String = "1e+014"
        Dim p_uz As String = "1e+014"
        Dim p_rx As String = "1e+016"
        Dim p_ry As String = "1e+016"
        Dim p_rz As String = "1e+016"

        For l1 = 0 To sp_val_brk.Count - 1 Step 2
            If sp_val_brk(l1) = "UX" Then
                p_ux = sp_val_brk(l1 + 1)
            End If
            If sp_val_brk(l1) = "UY" Then
                p_uy = sp_val_brk(l1 + 1)
            End If
            If sp_val_brk(l1) = "UZ" Then
                p_uz = sp_val_brk(l1 + 1)
            End If
            If sp_val_brk(l1) = "RX" Then
                p_rx = sp_val_brk(l1 + 1)
            End If
            If sp_val_brk(l1) = "RY" Then
                p_ry = sp_val_brk(l1 + 1)
            End If
            If sp_val_brk(l1) = "RZ" Then
                p_rz = sp_val_brk(l1 + 1)
            End If
        Next

        dt_pointspring.Rows.Add(sp_name, p_ux, p_uy, p_uz, p_rx, p_ry, p_rz)
    End Function

    Public Function parsing_pointassign_spring(ByVal sp_node As String, ByVal sp_story As String, ByVal sp_name As String)
        If dt_pointspring.Rows.Count > 0 Then
            Dim node_pass As Integer = func_node_converter(sp_node, sp_story)
            For l1 = 0 To dt_pointspring.Rows.Count - 1
                If dt_pointspring.Rows(l1).Item("Spring_name") = sp_name Then
                    dt_springs.Rows.Add(node_pass, dt_pointspring.Rows(l1).Item("UX"), dt_pointspring.Rows(l1).Item("UY"), dt_pointspring.Rows(l1).Item("UZ"), dt_pointspring.Rows(l1).Item("RX"), dt_pointspring.Rows(l1).Item("RY"), dt_pointspring.Rows(l1).Item("RZ"))
                    Exit For
                End If
            Next
        End If
    End Function

    Public Function writing_units(ByVal out_file As StreamWriter)
        out_file.WriteLine(";---------------------------------------------------------------------------")
        out_file.WriteLine(";  midas Gen Text(MGT) File.")
        out_file.WriteLine(";  Date : ")
        out_file.WriteLine(";---------------------------------------------------------------------------")
        out_file.WriteLine(" ")
        out_file.WriteLine("*VERSION")
        out_file.WriteLine("   8.4.5")
        out_file.WriteLine(" ")
        If dtCrtdUnits.Rows.Count > 0 Then
            out_file.WriteLine("*UNIT")
            For Each row As DataRow In dtCrtdUnits.Rows
                out_file.WriteLine(row("Force") & " , " & row("Length") & " , " & row("Heat") & " , " & row("Temper"))
            Next
        End If
    End Function

    Public Function writing_node(ByVal out_file As StreamWriter)
        If dtCrtdNode.Rows.Count > 0 Then
            out_file.WriteLine("*NODE")
            Dim ck As Integer = 0
            For Each row As DataRow In dtCrtdNode.Rows
                If dtCrtdNode.Rows(ck).Item("IS_PASSING") = 1 Then
                    out_file.WriteLine(row("Node_Number") & ", " & row("X") & ", " & row("Y") & ", " & row("Z"))
                End If
                ck = ck + 1
            Next
        End If
    End Function

    Public Function writing_elem(ByVal out_file As StreamWriter)
        If dtCrtdElem.Rows.Count > 0 Or dtarea_ele_pass.Rows.Count > 0 Then
            out_file.WriteLine("*ELEMENT")
        End If
        Dim f_ele As Integer = 1
        If dtCrtdElem.Rows.Count > 0 Then
            For Each row As DataRow In dtCrtdElem.Rows
                out_file.WriteLine(f_ele.ToString() & ", BEAM ,     " & row("Material") & ",    " & row("Section") & ", " & row("N1") & ", " & row("N2") & ", " & "0" & ",  " & "0")
                dt_final_element_list.Rows.Add(f_ele, "0", "0")
                f_ele = f_ele + 1
            Next
        End If
        If dtarea_ele_pass.Rows.Count > 0 Then
            final_plate_count_start = f_ele
            For Each row As DataRow In dtarea_ele_pass.Rows
                out_file.WriteLine(f_ele.ToString() & ", PLATE ,     " & row("Material") & ",    " & row("Property") & ", " & row("N1") & ", " & row("N2") & ", " & row("N3") & ", " & row("N4") & ", " & row("SUB") & ",  " & row("WID"))
                dt_final_element_list.Rows.Add(f_ele, row("Orignal_area_name"), row("Orignal_area_story"))
                f_ele = f_ele + 1
            Next
        End If
    End Function

    'Public Function writing_story(ByVal out_file As StreamWriter)
    '    If dtStorydata.Rows.Count > 0 Then
    '        out_file.WriteLine("*STORY")
    '        Dim n As Single = 0
    '        Dim col1 As Single = Math.Round((dtCrtdNode.Compute("MAX(X)", Nothing) - dtCrtdNode.Compute("MIN(X)", Nothing)), 3, MidpointRounding.AwayFromZero)
    '        Dim col2 As Single = Math.Round((dtCrtdNode.Compute("MAX(Y)", Nothing) - dtCrtdNode.Compute("MIN(Y)", Nothing)), 3, MidpointRounding.AwayFromZero)
    '        Dim col3 As Single = 0.5 * Math.Round((dtCrtdNode.Compute("MAX(X)", Nothing) - dtCrtdNode.Compute("MIN(X)", Nothing)), 3, MidpointRounding.AwayFromZero)
    '        Dim col4 As Single = 0.5 * Math.Round((dtCrtdNode.Compute("MAX(Y)", Nothing) - dtCrtdNode.Compute("MIN(Y)", Nothing)), 3, MidpointRounding.AwayFromZero)
    '        Dim col5 As Single = 0.05 * Math.Round((dtCrtdNode.Compute("MAX(X)", Nothing) - dtCrtdNode.Compute("MIN(X)", Nothing)), 3, MidpointRounding.AwayFromZero)
    '        Dim col6 As Single = 0.05 * Math.Round((dtCrtdNode.Compute("MAX(Y)", Nothing) - dtCrtdNode.Compute("MIN(Y)", Nothing)), 3, MidpointRounding.AwayFromZero)
    '        Dim col7 As Single = 0.15 * Math.Round((dtCrtdNode.Compute("MAX(X)", Nothing) - dtCrtdNode.Compute("MIN(X)", Nothing)), 3, MidpointRounding.AwayFromZero)
    '        Dim col8 As Single = 0.15 * Math.Round((dtCrtdNode.Compute("MAX(Y)", Nothing) - dtCrtdNode.Compute("MIN(Y)", Nothing)), 3, MidpointRounding.AwayFromZero)

    '        For Each row As DataRow In dtStorydata.Rows
    '            If dtStorydata.Rows(n).Item("Story_height") = 0 Then
    '                out_file.WriteLine("BASE" & " ,  " & row("Story_height") & ", NO," & col1 & " ,  " & col2 & " ,  " & col3 & " ,  " & col4 & " ,  " & col5 & " ,  " & col6 & " ,0,0,1,1,  " & col7 & " ,  " & col8 & ", 0")
    '            ElseIf n < dtStorydata.Rows.Count - 1 Then
    '                out_file.WriteLine(row("Story_name") & " ,  " & row("Story_height") & ", YES," & col1 & " ,  " & col2 & " ,  " & col3 & " ,  " & col4 & " ,  " & col5 & " ,  " & col6 & " , 0, 0, 1, 1,  " & col7 & " ,  " & col8 & ", 0")
    '            Else
    '                out_file.WriteLine("ROOF" & " ,  " & row("Story_height") & ", YES," & col1 & " ,  " & col2 & " ,  " & col3 & " ,  " & col4 & " ,  " & col5 & " ,  " & col6 & " , 0, 0, 1, 1,  " & col7 & " ,  " & col8 & ", 0")
    '            End If
    '            n = n + 1
    '        Next
    '    End If
    'End Function

    Public Function writing_BoundaryConditions(ByVal out_file As StreamWriter)
        If dtboundary_conditions.Rows.Count > 0 Then
            out_file.WriteLine("*CONSTRAINT")
            For Each row As DataRow In dtboundary_conditions.Rows
                out_file.WriteLine(row("Node_Number") & ",  " & row("Dx") & row("Dy") & row("Dz") & row("Rx") & row("Ry") & row("Rz"))
            Next
        End If
    End Function

    Public Function writing_material(ByVal out_file As StreamWriter)
        If dtMatgrade.Rows.Count > 0 Then
            out_file.WriteLine("*MATERIAL")
            For Each row As DataRow In dtMatgrade.Rows
                out_file.WriteLine(row("Material_id") & ", " & row("Material_type") & ", " & row("Material_name") & ", " & row("Specific_Heat") & ", " & row("Heat_Conduction") & ", , C,NO," & row("Damping_Ratio") & ", 2," & row("Modulus_Of_Elasticity") & ",   " & row("Poisons_Ratio") & ",    " & row("Thermal_Coeff") & ",   " & row("Weight_Density") & "    ,0")
            Next
        End If
    End Function

    Public Function writing_section(ByVal out_file As StreamWriter)
        If dtProSection.Rows.Count > 0 Then
            out_file.WriteLine("*SECTION")
            For Each row As DataRow In dtProSection.Rows
                out_file.WriteLine(row("Section_id") & ",  DBUSER ," & row("Section_name") & "   ,CC, 0, 0, 0, 0, 0, 0, YES, " & row("Section_shape") & ", 2, " & row("d1") & ",  " & row("d2") & ", " & row("d3") & ", " & row("d4") & ", " & row("d5") & ",  " & row("d6") & ", " & row("d7") & ", " & row("d8"))
            Next
        End If
    End Function

    Public Function writing_load(ByVal out_file As StreamWriter)
        If dtload_pattern.Rows.Count > 0 Then
            Dim ck1 As Integer = 0
            Dim ck2 As Integer = 0
            Dim ck3 As Integer = 0
            Dim ck4 As Integer = 0
            Dim sw As Integer = 0
            For Each row As DataRow In dtload_pattern.Rows
                out_file.WriteLine("*USE-STLD,   " & row("Pattern_name"))
                If dtload_pattern.Rows(ck1).Item("Pattern_type") = "D" And sw = 0 Then
                    out_file.WriteLine("*SELFWEIGHT, 0, 0, -1,")
                    sw = 1
                End If

                ck2 = 0
                Dim sck2 As Integer = 0
                For Each row2 As DataRow In dtNodalLoads.Rows
                    If dtNodalLoads.Rows(ck2).Item("LC_NAME") = dtload_pattern.Rows(ck1).Item("Pattern_name") Then
                        If sck2 = 0 Then
                            out_file.WriteLine("*CONLOAD")
                            sck2 = 1
                        End If
                        out_file.WriteLine(row2("Node_number") & ", " & row2("FX") & ", " & row2("FY") & ", " & row2("FZ") & ", " & row2("MX") & ", " & row2("MY") & ", " & row2("MZ"))
                    End If
                    ck2 = ck2 + 1
                Next
                ck3 = 0
                Dim sck3 As Integer = 0
                For Each row3 As DataRow In dtbeam_loads.Rows
                    If dtbeam_loads.Rows(ck3).Item("LC_NAME") = dtload_pattern.Rows(ck1).Item("Pattern_name") Then
                        If sck3 = 0 Then
                            out_file.WriteLine("*BEAMLOAD")
                            sck3 = 1
                        End If
                        out_file.WriteLine(row3("Element_number") & ", BEAM ," & row3("Type_to_print") & ", " & row3("Loading_direction") & ", " & row3("Projection") & ", NO,aDir[1], , , , " & row3("d1") & ", " & row3("p1") & ", " & row3("d2") & ", " & row3("p2") & ", " & row3("d3") & ", " & row3("p3") & ", " & row3("d4") & ", " & row3("p4") & ", , NO, 0, 0, NO,")
                    End If
                    ck3 = ck3 + 1
                Next
                ck4 = 0
                Dim sck4 As Integer = 0
                If dt_area_load_etabs.Rows.Count > 0 Then
                    For n_area_etabs = 0 To dt_area_load_etabs.Rows.Count - 1
                        If dt_area_load_etabs.Rows(n_area_etabs).Item("Area_loadcase") = dtload_pattern.Rows(ck1).Item("Pattern_name") Then
                            If sck4 = 0 Then
                                out_file.WriteLine(" ")
                                out_file.WriteLine("*PRESSURE")
                                sck4 = 1
                            End If
                            Dim neg_chk As Integer = 0
                            For n_area_ele = final_plate_count_start - 1 To dt_final_element_list.Rows.Count - 1
                                If CStr(dt_area_load_etabs.Rows(n_area_etabs).Item("Area_name") & "_" & dt_area_load_etabs.Rows(n_area_etabs).Item("Area_story")) = CStr(dt_final_element_list.Rows(n_area_ele).Item("Final_org_name") & "_" & dt_final_element_list.Rows(n_area_ele).Item("Final_org_story")) Then
                                    Dim lc_dir As String = dt_area_load_etabs.Rows(n_area_etabs).Item("Area_dir")
                                    Dim proj As String = "NO"
                                    If lc_dir = "GRAV" Then
                                        lc_dir = "GZ"
                                        neg_chk = 1
                                    End If
                                    If lc_dir = "XPROJ" Then
                                        lc_dir = "GX"
                                        proj = "YES"
                                    End If
                                    If lc_dir = "YPROJ" Then
                                        lc_dir = "GY"
                                        proj = "YES"
                                    End If
                                    If lc_dir = "GRAVPROJ" Then
                                        lc_dir = "GZ"
                                        proj = "YES"
                                        neg_chk = 1
                                    End If
                                    If lc_dir = "1" Then
                                        lc_dir = "LX"
                                    End If
                                    If lc_dir = "2" Then
                                        lc_dir = "LY"
                                    End If
                                    If lc_dir = "3" Then
                                        lc_dir = "LZ"
                                    End If
                                    If lc_dir = "X" Then
                                        lc_dir = "GX"
                                    End If
                                    If lc_dir = "Y" Then
                                        lc_dir = "GY"
                                    End If
                                    If neg_chk = 0 Then
                                        If CStr(dt_area_load_etabs.Rows(n_area_etabs).Item("Area_load_mag")) <> "0" Then
                                            out_file.WriteLine(dt_final_element_list.Rows(n_area_ele).Item("Final_reference") & ", PRES, PLATE, FACE, " & lc_dir & ", 0, 0, 0, " & proj & ", " & dt_area_load_etabs.Rows(n_area_etabs).Item("Area_load_mag") & ", 0, 0, 0, 0,")
                                        End If
                                        'If dt_area_load_etabs.Rows.Count > 3 Then
                                        '    dt_area_load_etabs.Rows(n_area_etabs).Delete()
                                        'End If
                                    End If
                                    If neg_chk = 1 Then
                                        If CStr(dt_area_load_etabs.Rows(n_area_etabs).Item("Area_load_mag")) <> "0" Then
                                            out_file.WriteLine(dt_final_element_list.Rows(n_area_ele).Item("Final_reference") & ", PRES, PLATE, FACE, " & lc_dir & ", 0, 0, 0, " & proj & ", " & dt_area_load_etabs.Rows(n_area_etabs).Item("Area_load_mag") & ", 0, 0, 0, 0,")
                                        End If
                                        'If dt_area_load_etabs.Rows.Count > 3 Then
                                        '    dt_area_load_etabs.Rows(n_area_etabs).Delete()
                                        'End If
                                    End If
                                End If
                                Application.DoEvents()
                            Next n_area_ele
                        End If
                        Application.DoEvents()
                    Next
                End If
                ck1 = ck1 + 1
                Application.DoEvents()
            Next
        End If
    End Function

    Public Function writing_loadpattern(ByVal out_file As StreamWriter)
        If dtload_pattern.Rows.Count > 0 Then
            out_file.WriteLine("*STLDCASE")
            For Each row As DataRow In dtload_pattern.Rows
                out_file.WriteLine(row("Pattern_name") & ", " & row("Pattern_type") & ",")
            Next
        End If
    End Function

    Public Function writing_thickness(ByVal out_file As StreamWriter)
        If dtthickness.Rows.Count > 0 Then
            out_file.WriteLine("*THICKNESS")
            For Each row As DataRow In dtthickness.Rows
                out_file.WriteLine(row("Thickness_id") & ", VALUE, YES, " & row("Thickness_depth") & ", 0, NO, 0, 0")
            Next
        End If
    End Function

    Public Function writing_modifier(ByVal out_file As StreamWriter)
        If dtmodifier.Rows.Count > 0 Then
            out_file.WriteLine("*SECT-SCALE")
            For i = 0 To dtmodifier.Rows.Count - 1
                out_file.WriteLine(dtmodifier.Rows(i).Item("mod_id") & ", " & dtmodifier.Rows(i).Item("amod") & ", " & dtmodifier.Rows(i).Item("a2mod") & ", " & dtmodifier.Rows(i).Item("a3mod") & ", " & dtmodifier.Rows(i).Item("jmod") & ", " & dtmodifier.Rows(i).Item("i2mod") & ", " & dtmodifier.Rows(i).Item("i3mod") & ", " & dtmodifier.Rows(i).Item("wmod") & ", , 1")
            Next
        End If
    End Function

    Public Function writting_spring(ByVal out_file As StreamWriter)
        If dt_springs.Rows.Count > 0 Then
            out_file.WriteLine("*SPRING")
            For i = 0 To dt_springs.Rows.Count - 1
                out_file.WriteLine(dt_springs.Rows(i).Item("Sp_node") & ", LINEAR, " & dt_springs.Rows(i).Item("Sp_ux") & ", " & dt_springs.Rows(i).Item("Sp_uy") & ", " & dt_springs.Rows(i).Item("Sp_uz") & ", " & dt_springs.Rows(i).Item("Sp_rx") & ", " & dt_springs.Rows(i).Item("Sp_ry") & ", " & dt_springs.Rows(i).Item("Sp_rz") & ", NO, 0, 0, 0, 0, 0, 0, , 0, 0, 0, 0, 0")
            Next
        End If
    End Function

    'Public Function writing_floadtype(ByVal out_file As StreamWriter)
    '    If dt_area_load_etabs.Rows.Count > 0 Then
    '        out_file.WriteLine(" ")
    '        out_file.WriteLine("*PRESSURE")
    '        For n_area_etabs = 0 To dt_area_load_etabs.Rows.Count - 1
    '            Dim neg_chk As Integer = 0
    '            For n_area_ele = final_plate_count_start - 1 To dt_final_element_list.Rows.Count - 1
    '                If CStr(dt_area_load_etabs.Rows(n_area_etabs).Item("Area_name") & "_" & dt_area_load_etabs.Rows(n_area_etabs).Item("Area_story")) = CStr(dt_final_element_list.Rows(n_area_ele).Item("Final_org_name") & "_" & dt_final_element_list.Rows(n_area_ele).Item("Final_org_story")) Then
    '                    Dim lc_dir As String = dt_area_load_etabs.Rows(n_area_etabs).Item("Area_dir")
    '                    If lc_dir = "GRAV" Then
    '                        lc_dir = "GZ"
    '                        neg_chk = 1
    '                    End If
    '                    If lc_dir = "XPROJ" Then
    '                        lc_dir = "GX"
    '                    End If
    '                    If lc_dir = "YPROJ" Then
    '                        lc_dir = "GY"
    '                    End If
    '                    If lc_dir = "GRAVPROJ" Then
    '                        lc_dir = "GZ"
    '                        neg_chk = 1
    '                    End If
    '                    If lc_dir = "1" Then
    '                        lc_dir = "LX"
    '                    End If
    '                    If lc_dir = "2" Then
    '                        lc_dir = "LY"
    '                    End If
    '                    If lc_dir = "3" Then
    '                        lc_dir = "LZ"
    '                    End If
    '                    If lc_dir = "X" Then
    '                        lc_dir = "GX"
    '                    End If
    '                    If lc_dir = "Y" Then
    '                        lc_dir = "GY"
    '                    End If
    '                    If neg_chk = 0 Then
    '                        out_file.WriteLine(dt_final_element_list.Rows(n_area_ele).Item("Final_reference") & ", PRES, PLATE, FACE, " & dt_area_load_etabs.Rows(n_area_etabs).Item("Area_dir") & ", 0, 0, 0, NO," & dt_area_load_etabs.Rows(n_area_etabs).Item("Area_load_mag") & ", 0, 0, 0, 0,")
    '                    End If
    '                    If neg_chk = 1 Then
    '                        out_file.WriteLine(dt_final_element_list.Rows(n_area_ele).Item("Final_reference") & ", PRES, PLATE, FACE, " & dt_area_load_etabs.Rows(n_area_etabs).Item("Area_dir") & ", 0, 0, 0, NO, -" & dt_area_load_etabs.Rows(n_area_etabs).Item("Area_load_mag") & ", 0, 0, 0, 0,")
    '                    End If
    '                End If
    '            Next n_area_ele
    '        Next n_area_etabs
    '    End If
    'End Function

    'Public Function writing_floorload(ByVal out_file As StreamWriter)
    '    If dt_areaload_pass.Rows.Count > 0 Then
    '        out_file.WriteLine(" ")
    '        out_file.WriteLine("*FLOORLOAD")
    '        For Each row As DataRow In dt_areaload_pass.Rows
    '            If row("Area_pass_n4") <> 0 Then
    '                out_file.WriteLine("   " & row("Area_pass_name") & ", 2, 0, 0, 0, 0, " & row("Area_pass_dir") & ", NO, , NO, NO, , " & row("Area_pass_n1") & ", " & row("Area_pass_n2") & ", " & row("Area_pass_n3") & ", " & row("Area_pass_n4"))
    '            Else
    '                out_file.WriteLine("   " & row("Area_pass_name") & ", 2, 0, 0, 0, 0, " & row("Area_pass_dir") & ", NO, , NO, NO, , " & row("Area_pass_n1") & ", " & row("Area_pass_n2") & ", " & row("Area_pass_n3"))
    '            End If

    '        Next
    '    End If
    'End Function

    Public Function rearrange_elem()

        Dim N1 As Integer
        Dim N2 As Integer
        Dim lineassign_count As Integer = dtcrtdlineassign.Rows.Count - 1
        Dim elemconn_count As Integer = dtCrtdElem_conn.Rows.Count - 1
        Dim story_count As Integer = dtStorydata.Rows.Count - 1

        For nthbeam = 0 To lineassign_count
            For nthbeam1 = 0 To elemconn_count
                If dtCrtdElem_conn.Rows(nthbeam1).Item("Type") = dtcrtdlineassign.Rows(nthbeam).Item("la_uq_elem") Then
                    If dtCrtdElem_conn.Rows(CStr(nthbeam1)).Item("Floor_var") = "0" Then
                        N1 = func_node_converter(dtCrtdElem_conn.Rows(CStr(nthbeam1)).Item("N1"), dtcrtdlineassign(nthbeam).Item("la_story"))
                        N2 = func_node_converter(dtCrtdElem_conn.Rows(CStr(nthbeam1)).Item("N2"), dtcrtdlineassign(nthbeam).Item("la_story"))
                        Exit For
                    End If
                    If dtCrtdElem_conn.Rows(CStr(nthbeam1)).Item("Floor_var") <> "0" Then
                        For nthbeam2 = 0 To story_count
                            If dtcrtdlineassign(nthbeam).Item("la_story") = dtStorydata.Rows(nthbeam2).Item("Story_name") Then
                                N1 = func_node_converter(dtCrtdElem_conn.Rows(CStr(nthbeam1)).Item("N1"), dtStorydata.Rows(nthbeam2 - dtCrtdElem_conn.Rows(CStr(nthbeam1)).Item("Floor_var")).Item("Story_name"))
                                N2 = func_node_converter(dtCrtdElem_conn.Rows(CStr(nthbeam1)).Item("N2"), dtcrtdlineassign(nthbeam).Item("la_story"))
                                Application.DoEvents()
                                Exit For
                            End If
                            Application.DoEvents()
                        Next nthbeam2
                    End If
                End If
                Application.DoEvents()
            Next nthbeam1
            If N1 <> N2 And N1 <> 0 And N2 <> 0 Then
                dtCrtdElem.Rows.Add(CStr(nthbeam + 1), CStr(dtcrtdlineassign.Rows(CStr(nthbeam)).Item("la_uq_elem")), CStr(dtcrtdlineassign.Rows(CStr(nthbeam)).Item("la_section")), 0, N1, N2, CStr(dtcrtdlineassign.Rows(CStr(nthbeam)).Item("la_story")))
                area_element_count_begin = nthbeam + 1
            End If
            Application.DoEvents()
        Next nthbeam

    End Function

    Public Function rearrange_story(ByVal dtcrtdstoryorg As DataTable)
        Dim nthstory As Integer
        Dim pbval As Integer = 0
        story_height_sum = 0
        nthstory = dtcrtdstoryorg.Rows.Count - 1

        For Each row As DataRow In dtcrtdstoryorg.Rows
            If nthstory >= 0 Then
                story_height_sum = story_height_sum + dtcrtdstoryorg.Rows(nthstory).Item("Story_height")
                dtStorydata.Rows.Add(dtcrtdstoryorg.Rows(nthstory).Item("Story_name"), story_height_sum) ''breaking id therer is a space in between the stgory names
            End If
            nthstory = nthstory - 1
            pbval = pbval + 1
            Application.DoEvents()
        Next
    End Function

    Public Function elem_section()
        Dim n As Integer = 0
        Dim n1 As Integer
        Dim n2 As Integer
        Dim sec_chk As Integer = 0
        For Each row As DataRow In dtCrtdElem.Rows
            n1 = 0
            sec_chk = 0
            For Each row1 As DataRow In dtProSection.Rows
                If dtCrtdElem.Rows(n).Item("Section") = dtProSection.Rows(n1).Item("Section_name") Then
                    dtCrtdElem.Rows(n).Item("Section") = dtProSection.Rows(n1).Item("Section_id")
                    sec_chk = 1
                    n2 = 0
                    For Each row3 As DataRow In dtMatgrade.Rows
                        If dtMatgrade.Rows(n2).Item("Material_name") = dtProSection.Rows(n1).Item("Section_mat") Then
                            dtCrtdElem.Rows(n).Item("Material") = dtMatgrade.Rows(n2).Item("Material_id")
                            Application.DoEvents()
                            Exit For
                        End If
                        n2 = n2 + 1
                        Application.DoEvents()
                    Next
                    Exit For
                End If
                n1 = n1 + 1
            Next

            If sec_chk = 0 Then
                'Section could not be found
                'search Datatable again
                Dim strNF As String = row.Item("Section").ToString
                Dim nf() As DataRow = dtProSectionUndef.Select("Section_name = '" & strNF & "'")
                If nf.Count > 0 Then

                    dtCrtdElem.Rows(n).Item("Section") = CInt(nf(0)(0))

                    If dtCrtdElem.Rows(n).Item("Material") = 0 Then
                        Dim matnf As String = nf(0)("Section_mat").ToString
                        Dim nfmat() As DataRow = dtMatgrade.Select("Material_name = '" & matnf & "'")
                        If nfmat.Count > 0 Then
                            dtCrtdElem.Rows(n).Item("Material") = nfmat(0)
                        End If

                    End If

                Else
                    dtCrtdElem.Rows(n).Item("Section") = 1
                End If

            End If
            If dtCrtdElem.Rows(n).Item("Material") = 0 Then
                dtCrtdElem.Rows(n).Item("Material") = 1
            End If
            n = n + 1
            Application.DoEvents()
        Next
    End Function

    Public Function area_element()
        Dim st As String = 0
        Dim t_mat_c As Integer = 0
        Dim t_sec_c As Integer = 0
        Dim N1_pass As Integer = 0
        Dim N2_pass As Integer = 0
        Dim N3_pass As Integer = 0
        Dim N4_pass As Integer = 0

        For n_main = 0 To dtarea_assign.Rows.Count - 1
            For n1 = 0 To dtarea_conn.Rows.Count - 1
                If dtarea_assign.Rows(n_main).Item("Area_name") = dtarea_conn.Rows(n1).Item("Connectivity_name") Then
                    Dim flr_var() As String = dtarea_conn.Rows(n1).Item("Connectivity_floor_chk").Split(" ".ToCharArray(), StringSplitOptions.RemoveEmptyEntries) 'remember deleteing it after loop
                    If flr_var(0) <> 0 Then
                        For nthbeam2 = 0 To storydata_count
                            If dtarea_assign.Rows(n_main).Item("Area_story") = dtStorydata.Rows(nthbeam2).Item("Story_name") Then
                                N1_pass = func_node_converter(dtarea_conn.Rows(n1).Item("N1"), dtStorydata.Rows(nthbeam2 - flr_var(0)).Item("Story_name"))
                                Exit For
                            End If
                        Next nthbeam2
                    End If
                    If flr_var(0) = 0 Then
                        N1_pass = func_node_converter(dtarea_conn.Rows(n1).Item("N1"), dtarea_assign.Rows(n_main).Item("Area_story"))
                    End If

                    If flr_var(1) <> 0 Then
                        For nthbeam2 = 0 To storydata_count
                            If dtarea_assign.Rows(n_main).Item("Area_story") = dtStorydata.Rows(nthbeam2).Item("Story_name") Then
                                N2_pass = func_node_converter(dtarea_conn.Rows(n1).Item("N2"), dtStorydata.Rows(nthbeam2 - flr_var(1)).Item("Story_name"))
                                Exit For
                            End If
                        Next nthbeam2
                    End If
                    If flr_var(1) = 0 Then
                        N2_pass = func_node_converter(dtarea_conn.Rows(n1).Item("N2"), dtarea_assign.Rows(n_main).Item("Area_story"))
                    End If

                    If flr_var(2) <> 0 Then
                        For nthbeam2 = 0 To storydata_count
                            If dtarea_assign.Rows(n_main).Item("Area_story") = dtStorydata.Rows(nthbeam2).Item("Story_name") Then
                                N3_pass = func_node_converter(dtarea_conn.Rows(n1).Item("N3"), dtStorydata.Rows(nthbeam2 - flr_var(2)).Item("Story_name"))
                                Exit For
                            End If
                        Next nthbeam2
                    End If
                    If flr_var(2) = 0 Then
                        N3_pass = func_node_converter(dtarea_conn.Rows(n1).Item("N3"), dtarea_assign.Rows(n_main).Item("Area_story"))
                    End If

                    If dtarea_conn.Rows(n1).Item("N4") <> "0" Then
                        If flr_var(3) <> 0 Then
                            For nthbeam2 = 0 To storydata_count
                                If dtarea_assign.Rows(n_main).Item("Area_story") = dtStorydata.Rows(nthbeam2).Item("Story_name") Then
                                    N4_pass = func_node_converter(dtarea_conn.Rows(n1).Item("N4"), dtStorydata.Rows(nthbeam2 - flr_var(3)).Item("Story_name"))
                                    Exit For
                                End If
                            Next nthbeam2
                        End If
                        If flr_var(3) = 0 Then
                            N4_pass = func_node_converter(dtarea_conn.Rows(n1).Item("N4"), dtarea_assign.Rows(n_main).Item("Area_story"))
                        End If
                    Else
                        N4_pass = 0
                    End If

                    t_sec_c = 0
                    Dim area_mat As String = "1"
                    Dim area_pro As String = "1"
                    For Each row5 As DataRow In dtthickness.Rows
                        If dtarea_assign.Rows(n_main).Item("Area_section") = dtthickness.Rows(t_sec_c).Item("Thickness_name") Then
                            area_pro = dtthickness.Rows(t_sec_c).Item("Thickness_id")
                            t_mat_c = 0
                            For Each row6 As DataRow In dtMatgrade.Rows
                                If dtMatgrade.Rows(t_mat_c).Item("Material_name") = dtthickness.Rows(t_sec_c).Item("Thickness_material") Then
                                    area_mat = dtMatgrade.Rows(t_mat_c).Item("Material_id")
                                    Application.DoEvents()
                                    Exit For
                                End If
                                t_mat_c = t_mat_c + 1
                                Application.DoEvents()
                            Next
                            Exit For
                        End If
                        t_sec_c = t_sec_c + 1
                        Application.DoEvents()
                    Next
                    If N1_pass <> 0 And N2_pass <> 0 And N3_pass <> 0 And N1_pass <> N2_pass And N1_pass <> N3_pass And N1_pass <> N4_pass And N2_pass <> N3_pass And N2_pass <> N4_pass And N3_pass <> N4_pass Then
                        dtarea_ele_pass.Rows.Add(dtarea_conn.Rows(n1).Item("Connectivity_count"), area_mat, area_pro, N1_pass, N2_pass, N3_pass, N4_pass, dtarea_conn.Rows(n1).Item("SUB"), dtarea_conn.Rows(n1).Item("WID"), dtarea_assign.Rows(n_main).Item("Area_name"), dtarea_assign.Rows(n_main).Item("Area_story"), dtarea_conn.Rows(n1).Item("chker"))
                        Application.DoEvents()
                    End If
                End If
                Application.DoEvents()
            Next n1
            Application.DoEvents()
        Next n_main
    End Function

    'Public Function areaload_floorload()
    '    Dim n As Integer = 0
    '    Dim n1 As Integer = 0
    '    Dim lc_dir As String

    '    For Each row As DataRow In dt_area_load_type.Rows
    '        n1 = 0
    '        For Each row2 As DataRow In dtarea_ele_pass.Rows
    '            If dtarea_ele_pass.Rows(n1).Item("Orignal_area_name") = dt_area_load_type.Rows(n).Item("Loadcase_name_area") And dtarea_ele_pass.Rows(n1).Item("Orignal_area_story") = dt_area_load_type.Rows(n).Item("Loadcase_name_story") Then
    '                If dt_area_load_type.Rows(n).Item("Loadcase_name_dir") = "GRAV" Then
    '                    lc_dir = "GZ"
    '                End If
    '                If dt_area_load_type.Rows(n).Item("Loadcase_name_dir") = "XPROJ" Then
    '                    lc_dir = "GX"
    '                End If
    '                If dt_area_load_type.Rows(n).Item("Loadcase_name_dir") = "YPROJ" Then
    '                    lc_dir = "GY"
    '                End If
    '                If dt_area_load_type.Rows(n).Item("Loadcase_name_dir") = "GRAVPROJ" Then
    '                    lc_dir = "GZ"
    '                End If
    '                If dt_area_load_type.Rows(n).Item("Loadcase_name_dir") = "1" Then
    '                    lc_dir = "LX"                             'check again once
    '                End If                                        'check again once
    '                If dt_area_load_type.Rows(n).Item("Loadcase_name_dir") = "2" Then
    '                    lc_dir = "LY"                             'check again once
    '                End If                                        'check again once
    '                If dt_area_load_type.Rows(n).Item("Loadcase_name_dir") = "3" Then
    '                    lc_dir = "LZ"                             'check again once
    '                End If                                        'check again once
    '                If dt_area_load_type.Rows(n).Item("Loadcase_name_dir") = "X" Then
    '                    lc_dir = "GX"                             'check again once
    '                End If                                        'check again once
    '                If dt_area_load_type.Rows(n).Item("Loadcase_name_dir") = "Y" Then
    '                    lc_dir = "GY"                             'check again once
    '                End If
    '                If dtarea_ele_pass.Rows(n1).Item("chker") = 1 Then
    '                    dt_areaload_pass.Rows.Add(dt_area_load_type.Rows(n).Item("Loadcase_name"), lc_dir, dtarea_ele_pass.Rows(n1).Item("N1"), dtarea_ele_pass.Rows(n1).Item("N2"), dtarea_ele_pass.Rows(n1).Item("N3"), dtarea_ele_pass.Rows(n1).Item("N4"))
    '                End If
    '            End If
    '            n1 = n1 + 1
    '        Next
    '        n = n + 1
    '    Next
    'End Function

    Public Function func_node_converter(ByVal input_node As String, ByVal input_story As String)

        Dim n_node_p As Integer = 0
        Dim fnd As Integer = 0
        Dim st_point As Integer
        For n1 = 0 To storydata_count
            If dtStorydata.Rows(n1).Item("Story_name") = input_story Then
                st_point = n1 * tot_org_nodes
                Exit For
            End If
            Application.DoEvents()
        Next n1
        For n_node = st_point To node_count_infunc
            If input_node = dtCrtdNode.Rows(n_node).Item("Node_orignal") And input_story = dtCrtdNode.Rows(n_node).Item("Story_orignal") Then
                dtCrtdNode.Rows(n_node).Item("IS_PASSING") = 1
                n_node_p = n_node
                fnd = 1
                Application.DoEvents()
                Exit For
            End If
            Application.DoEvents()
        Next n_node
        If fnd = 1 Then
            Return (dtCrtdNode.Rows(n_node_p).Item("Node_Number"))
        Else
            Return (0)
        End If
        Application.DoEvents()
    End Function

    Public Function func_element_converter(ByVal input_type As String, ByVal input_story As String)

        Dim n_ele_p As Integer = 0
        Dim fnd As Integer = 0
        For n_ele = 0 To dtCrtdElem.Rows.Count - 1
            If input_type = dtCrtdElem.Rows(n_ele).Item("Type") And input_story = dtCrtdElem.Rows(n_ele).Item("Floor_var") Then
                n_ele_p = n_ele
                fnd = 1
                Exit For
            End If
        Next n_ele
        If fnd = 1 Then
            Return (dtCrtdElem.Rows(n_ele_p).Item("Element_Number"))
        Else
            Return (0)
        End If
        Application.DoEvents()
    End Function

    Public Function straight_line_check(ByVal node_coll() As String)
        If node_coll.Count > 0 Then
            For l1 = 0 To dtCrtdNode.Rows.Count - 1
                If node_coll(0) = dtCrtdNode.Rows(l1).Item("Node_Number") Then
                    For l2 = 0 To dtCrtdNode.Rows.Count - 1
                        If node_coll(1) = dtCrtdNode.Rows(l2).Item("Node_Number") Then
                            If dtCrtdNode.Rows(l1).Item("X") = dtCrtdNode.Rows(l2).Item("X") Or dtCrtdNode.Rows(l1).Item("Y") = dtCrtdNode.Rows(l2).Item("Y") Or dtCrtdNode.Rows(l1).Item("Z") = dtCrtdNode.Rows(l2).Item("Z") Then
                                Return 0
                            End If
                        End If
                        If node_coll(2) = dtCrtdNode.Rows(l2).Item("Node_Number") Then
                            If dtCrtdNode.Rows(l1).Item("X") = dtCrtdNode.Rows(l2).Item("X") Or dtCrtdNode.Rows(l1).Item("Y") = dtCrtdNode.Rows(l2).Item("Y") Or dtCrtdNode.Rows(l1).Item("Z") = dtCrtdNode.Rows(l2).Item("Z") Then
                                Return 0
                            End If
                        End If
                    Next
                End If
            Next
            Return 1
        End If
    End Function

    Private Sub path_disp_Click(sender As Object, e As EventArgs) Handles path_disp.Click
        OpenFileDialog.Title = "Enter the input file"
        OpenFileDialog.Filter = "ETABS Text Files (*.$et, *e2k)|*.$et;*.e2k|All Files (*.*)|*.*"
        OpenFileDialog.ShowDialog()
        file_name = OpenFileDialog.FileName()
        If file_name <> "NO_FILE_SELECTED" Then
            path_disp.Text = file_name
            in_path = Path.GetDirectoryName(file_name)
            only_file_name = Path.GetFileNameWithoutExtension(file_name)
            lines = File.ReadAllLines(file_name)
            nodenumber = 1
            elementnumber = 1
        End If
        Application.DoEvents()
    End Sub

    Public Function delete_db()

        dtCrtdUnits.Columns.Clear()
        dtCrtdUnits.Rows.Clear()

        dtCrtdNode.Columns.Clear()
        dtCrtdNode.Rows.Clear()

        dtCrtdElem_conn.Columns.Clear()
        dtCrtdElem_conn.Rows.Clear()

        dtCrtdElem.Columns.Clear()
        dtCrtdElem.Rows.Clear()

        dtcrtdnodeorg.Columns.Clear()
        dtcrtdnodeorg.Rows.Clear()

        dtcrtdlineassign.Columns.Clear()
        dtcrtdlineassign.Rows.Clear()

        dtcrtdstoryorg.Columns.Clear()
        dtcrtdstoryorg.Rows.Clear()

        dtStorydata.Columns.Clear()
        dtStorydata.Rows.Clear()

        dtpointassign.Columns.Clear()
        dtpointassign.Rows.Clear()

        dtboundary_conditions.Columns.Clear()
        dtboundary_conditions.Rows.Clear()

        dtMatgrade.Columns.Clear()
        dtMatgrade.Rows.Clear()

        dtProSection.Columns.Clear()
        dtProSection.Rows.Clear()

        dtProSectionUndef.Columns.Clear()
        dtProSectionUndef.Rows.Clear()

        dtload_pattern.Columns.Clear()
        dtload_pattern.Rows.Clear()

        dtNodalLoads.Columns.Clear()
        dtNodalLoads.Rows.Clear()

        dtbeam_loads.Columns.Clear()
        dtbeam_loads.Rows.Clear()

        dtarea_assign.Columns.Clear()
        dtarea_assign.Rows.Clear()

        dtarea_conn.Columns.Clear()
        dtarea_conn.Rows.Clear()

        dtthickness.Columns.Clear()
        dtthickness.Rows.Clear()

        dtarea_ele_pass.Columns.Clear()
        dtarea_ele_pass.Rows.Clear()

        dt_area_load_etabs.Columns.Clear()
        dt_area_load_etabs.Rows.Clear()

        dt_area_load_type.Columns.Clear()
        dt_area_load_type.Rows.Clear()

        dt_areaload_pass.Columns.Clear()
        dt_areaload_pass.Rows.Clear()

        dt_final_element_list.Columns.Clear()
        dt_final_element_list.Rows.Clear()

        dt_loadset.Columns.Clear()
        dt_loadset.Rows.Clear()

        dtmodifier.Columns.Clear()
        dtmodifier.Rows.Clear()

        dt_pointspring.Columns.Clear()
        dt_pointspring.Rows.Clear()

        dt_springs.Columns.Clear()
        dt_springs.Rows.Clear()

        ProgressBar_read.Value = 0
        ProgressBar_writing.Value = 0

        Application.DoEvents()
    End Function

    Private Sub Button2_Click(sender As Object, e As EventArgs) Handles Button2.Click
        delete_db()
        End
        Application.Exit()
    End Imports System
Imports System.IO
Imports System.Text
Imports System.Xml
Imports System.Text.RegularExpressions

Public Class Form1

    Dim dtCrtdUnits As New DataTable
    Dim dtCrtdNode As New DataTable
    Dim dtCrtdElem_conn As New DataTable
    Dim dtCrtdElem As New DataTable
    Dim dtMatgrade As New DataTable
    Dim dtNodalLoads As New DataTable
    Dim dtLoadCases As New DataTable
    Dim dtStorydata As New DataTable

    Dim dtcrtdnodeorg As New DataTable
    Dim dtcrtdlineassign As New DataTable
    Dim dtcrtdstoryorg As New DataTable
    Dim node_passing As New DataTable
    Dim dtpointassign As New DataTable
    Dim dtboundary_conditions As New DataTable
    Dim dtload_pattern As New DataTable
    Dim dtbeam_loads As New DataTable
    Dim dtarea_assign As New DataTable
    Dim dtarea_conn As New DataTable
    Dim dtthickness As New DataTable
    Dim dtarea_ele_pass As New DataTable
    Dim dt_converter_table_node As New DataTable
    Dim dt_area_load_etabs As New DataTable
    Dim dt_area_load_type As New DataTable
    Dim dt_areaload_pass As New DataTable
    Dim dt_final_element_list As New DataTable
    Dim dt_loadset As New DataTable
    Dim dtProSection As New DataTable
    Dim dtProSectionUndef As New DataTable
    Dim dtmodifier As New DataTable
    Dim dt_pointspring As New DataTable
    Dim dt_springs As New DataTable

    Dim in_path As String
    Dim only_file_name As String
    Dim extension As String
    Dim out_path As String
    Dim out_path_2 As String
    Dim file_name As String
    Dim lines() As String
    Dim linesSAFE As String
    Dim line_count As Integer
    Dim story_height_sum As Single
    Dim nth_row As Integer

    Dim nodenumber As Integer
    Dim elementnumber As Integer
    Dim story_height As Single
    Dim no_story As Integer
    Dim once As Integer = 0
    Dim area_counter As Integer = 1
    Dim Connectivity_Count As Integer = 1
    Dim area_element_count_begin As Integer
    Dim node_count_infunc As Integer = 0
    Dim tot_org_nodes As Integer = 0
    Dim storydata_count As Integer = 0
    Dim final_plate_count_start As Integer = 0
    Dim code_ref As String = "NULL"

    '''''''''''''''''''''''''''''''''''''''''''''

    'Dim Material_id As Integer = 1
    'Dim sec_id As Integer = 1
    'Dim loadpattern_id As Integer = 1
    'Dim thickness_id_slab As Integer = 1
    'Dim thickness_id_wall As Integer = 100
    'Dim pointload_id As Integer = 1
    'Dim Material_name As String
    'Dim Specific_Heat As Double
    'Dim Heat_Conduction As Double
    'Dim Damping_Ratio As Double
    'Dim Modulus_Of_Elasticity As Double
    'Dim Poisons_Ratio As Double
    'Dim Thermal_Coeff As Double
    'Dim Weight_Density As Double
    'Dim nodes As New List(Of String)()

    'Dim lineload_ct As Integer = 0
    'Dim p01 As Double
    'Dim p02 As Double
    'Dim p03 As Double
    'Dim p04 As Double
    'Dim p11 As Double
    'Dim p12 As Double
    'Dim p13 As Double
    'Dim p14 As Double
    'Dim p21 As Double
    'Dim p22 As Double
    'Dim p23 As Double
    'Dim p24 As Double
    'Dim prevpart As String = "123"
    'Dim point_chk As Integer = 0

    'Dim lnas_chk As Integer = 0
    'Dim ll_chk As Integer = 0
    Private Sub Button1_Click(sender As Object, e As EventArgs) Handles Button1.Click
        Try
            extension = Path.GetExtension(file_name)
            dtCrtdUnits.Columns.Add("Force", GetType(String))
            dtCrtdUnits.Columns.Add("Length", GetType(String))
            dtCrtdUnits.Columns.Add("Heat", GetType(String))
            dtCrtdUnits.Columns.Add("Temper", GetType(String))

            dtCrtdNode.Columns.Add("Node_Number")
            dtCrtdNode.Columns.Add("X")
            dtCrtdNode.Columns.Add("Y")
            dtCrtdNode.Columns.Add("Z")
            dtCrtdNode.Columns.Add("IS_PASSING")
            dtCrtdNode.Columns.Add("Node_orignal")
            dtCrtdNode.Columns.Add("Story_orignal")

            dtCrtdElem_conn.Columns.Add("Element_Number", GetType(String))
            dtCrtdElem_conn.Columns.Add("Type", GetType(String))
            dtCrtdElem_conn.Columns.Add("N1", GetType(String))
            dtCrtdElem_conn.Columns.Add("N2", GetType(String))
            dtCrtdElem_conn.Columns.Add("Floor_var", GetType(String))

            dtCrtdElem.Columns.Add("Element_Number", GetType(String))
            dtCrtdElem.Columns.Add("Type", GetType(String))
            dtCrtdElem.Columns.Add("Section", GetType(String))
            dtCrtdElem.Columns.Add("Material", GetType(String))
            dtCrtdElem.Columns.Add("N1", GetType(String))
            dtCrtdElem.Columns.Add("N2", GetType(String))
            dtCrtdElem.Columns.Add("Floor_var", GetType(String))

            dtcrtdnodeorg.Columns.Add("Node_Number_org")
            dtcrtdnodeorg.Columns.Add("X1")
            dtcrtdnodeorg.Columns.Add("X2")
            dtcrtdnodeorg.Columns.Add("Z_dash")

            dtcrtdlineassign.Columns.Add("la_uq_elem", GetType(String))
            dtcrtdlineassign.Columns.Add("la_story", GetType(String))
            dtcrtdlineassign.Columns.Add("la_section", GetType(String))

            dtcrtdstoryorg.Columns.Add("Story_name")
            dtcrtdstoryorg.Columns.Add("Story_height")

            dtStorydata.Columns.Add("Story_name")
            dtStorydata.Columns.Add("Story_height")

            dtpointassign.Columns.Add("Node_Number")
            dtpointassign.Columns.Add("Floor")
            dtpointassign.Columns.Add("Restraint")

            dtboundary_conditions.Columns.Add("Node_Number")
            dtboundary_conditions.Columns.Add("Dx")
            dtboundary_conditions.Columns.Add("Dy")
            dtboundary_conditions.Columns.Add("Dz")
            dtboundary_conditions.Columns.Add("Rx")
            dtboundary_conditions.Columns.Add("Ry")
            dtboundary_conditions.Columns.Add("Rz")

            dtMatgrade.Columns.Add("Material_id")
            dtMatgrade.Columns.Add("Material_name")
            dtMatgrade.Columns.Add("Specific_Heat")
            dtMatgrade.Columns.Add("Heat_Conduction")
            dtMatgrade.Columns.Add("Damping_Ratio")
            dtMatgrade.Columns.Add("Modulus_Of_Elasticity")
            dtMatgrade.Columns.Add("Poisons_Ratio")
            dtMatgrade.Columns.Add("Thermal_Coeff")
            dtMatgrade.Columns.Add("Weight_Density")
            dtMatgrade.Columns.Add("Material_type")

            dtProSection.Columns.Add("Section_id")
            dtProSection.Columns.Add("Section_name")
            dtProSection.Columns.Add("Section_mat")
            dtProSection.Columns.Add("Section_mat_name")
            dtProSection.Columns.Add("Section_shape")
            dtProSection.Columns.Add("d1")
            dtProSection.Columns.Add("d2")
            dtProSection.Columns.Add("d3")
            dtProSection.Columns.Add("d4")
            dtProSection.Columns.Add("d5")
            dtProSection.Columns.Add("d6")
            dtProSection.Columns.Add("d7")
            dtProSection.Columns.Add("d8")

            dtProSectionUndef.Columns.Add("Section_id")
            dtProSectionUndef.Columns.Add("Section_name")
            dtProSectionUndef.Columns.Add("Section_mat")

            dtload_pattern.Columns.Add("Pattern_id")
            dtload_pattern.Columns.Add("Pattern_name")
            dtload_pattern.Columns.Add("Pattern_type")

            dtNodalLoads.Columns.Add("Node_id")
            dtNodalLoads.Columns.Add("Node_number")
            dtNodalLoads.Columns.Add("FX")
            dtNodalLoads.Columns.Add("FY")
            dtNodalLoads.Columns.Add("FZ")
            dtNodalLoads.Columns.Add("MX")
            dtNodalLoads.Columns.Add("MY")
            dtNodalLoads.Columns.Add("MZ")
            dtNodalLoads.Columns.Add("LC_NAME")

            dtbeam_loads.Columns.Add("Element_number")
            dtbeam_loads.Columns.Add("Loading_direction")
            dtbeam_loads.Columns.Add("d1")
            dtbeam_loads.Columns.Add("p1")
            dtbeam_loads.Columns.Add("d2")
            dtbeam_loads.Columns.Add("p2")
            dtbeam_loads.Columns.Add("d3")
            dtbeam_loads.Columns.Add("p3")
            dtbeam_loads.Columns.Add("d4")
            dtbeam_loads.Columns.Add("p4")
            dtbeam_loads.Columns.Add("LC_NAME")
            dtbeam_loads.Columns.Add("Type_to_print")
            dtbeam_loads.Columns.Add("Projection")

            dtarea_assign.Columns.Add("Area_name")
            dtarea_assign.Columns.Add("Area_story")
            dtarea_assign.Columns.Add("Area_section")

            dtarea_conn.Columns.Add("Connectivity_Count")
            dtarea_conn.Columns.Add("Material")
            dtarea_conn.Columns.Add("Property")
            dtarea_conn.Columns.Add("N1")
            dtarea_conn.Columns.Add("N2")
            dtarea_conn.Columns.Add("N3")
            dtarea_conn.Columns.Add("N4")
            dtarea_conn.Columns.Add("SUB")
            dtarea_conn.Columns.Add("WID")
            dtarea_conn.Columns.Add("Connectivity_name")
            dtarea_conn.Columns.Add("Connectivity_floor_chk")
            dtarea_conn.Columns.Add("chker")

            dtthickness.Columns.Add("Thickness_id")
            dtthickness.Columns.Add("Thickness_name")
            dtthickness.Columns.Add("Thickness_material")
            dtthickness.Columns.Add("Thickness_depth")

            dtarea_ele_pass.Columns.Add("Connectivity_Count")
            dtarea_ele_pass.Columns.Add("Material")
            dtarea_ele_pass.Columns.Add("Property")
            dtarea_ele_pass.Columns.Add("N1")
            dtarea_ele_pass.Columns.Add("N2")
            dtarea_ele_pass.Columns.Add("N3")
            dtarea_ele_pass.Columns.Add("N4")
            dtarea_ele_pass.Columns.Add("SUB")
            dtarea_ele_pass.Columns.Add("WID")
            dtarea_ele_pass.Columns.Add("Orignal_area_name")
            dtarea_ele_pass.Columns.Add("Orignal_area_story")
            dtarea_ele_pass.Columns.Add("chker")

            dt_area_load_etabs.Columns.Add("Area_name")
            dt_area_load_etabs.Columns.Add("Area_story")
            dt_area_load_etabs.Columns.Add("Area_type")
            dt_area_load_etabs.Columns.Add("Area_dir")
            dt_area_load_etabs.Columns.Add("Area_loadcase")
            dt_area_load_etabs.Columns.Add("Area_load_mag")

            dt_area_load_type.Columns.Add("Loadcase_name")
            dt_area_load_type.Columns.Add("Loadcase_name_area")
            dt_area_load_type.Columns.Add("Loadcase_name_story")
            dt_area_load_type.Columns.Add("Loadcase_name_dir")

            dt_areaload_pass.Columns.Add("Area_pass_name")
            dt_areaload_pass.Columns.Add("Area_pass_dir")
            dt_areaload_pass.Columns.Add("Area_pass_n1")
            dt_areaload_pass.Columns.Add("Area_pass_n2")
            dt_areaload_pass.Columns.Add("Area_pass_n3")
            dt_areaload_pass.Columns.Add("Area_pass_n4")

            dt_final_element_list.Columns.Add("Final_reference")
            dt_final_element_list.Columns.Add("Final_org_name")
            dt_final_element_list.Columns.Add("Final_org_story")

            dt_loadset.Columns.Add("Loadset_name")
            dt_loadset.Columns.Add("Loadset_pattern")
            dt_loadset.Columns.Add("Loadset_magnitude")

            dtmodifier.Columns.Add("mod_id")
            dtmodifier.Columns.Add("amod")
            dtmodifier.Columns.Add("a2mod")
            dtmodifier.Columns.Add("a3mod")
            dtmodifier.Columns.Add("jmod")
            dtmodifier.Columns.Add("i2mod")
            dtmodifier.Columns.Add("i3mod")
            dtmodifier.Columns.Add("mmod")
            dtmodifier.Columns.Add("wmod")

            dt_pointspring.Columns.Add("Spring_name")
            dt_pointspring.Columns.Add("UX")
            dt_pointspring.Columns.Add("UY")
            dt_pointspring.Columns.Add("UZ")
            dt_pointspring.Columns.Add("RX")
            dt_pointspring.Columns.Add("RY")
            dt_pointspring.Columns.Add("RZ")

            dt_springs.Columns.Add("Sp_node")
            dt_springs.Columns.Add("Sp_ux")
            dt_springs.Columns.Add("Sp_uy")
            dt_springs.Columns.Add("Sp_uz")
            dt_springs.Columns.Add("Sp_rx")
            dt_springs.Columns.Add("Sp_ry")
            dt_springs.Columns.Add("Sp_rz")



            ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
            If extension = ".$et" Or extension = ".e2k" Or extension = ".$ET" Or extension = ".E2K" Then
                ETABS()
                '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
            ElseIf extension = ".$ft" Or extension = ".f2k" Or extension = ".$FT" Or extension = ".F2K" Then
                SAFE()
                MessageBox.Show("YOU ARE IN SAFE")
                '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
            Else
                MessageBox.Show("Wrong Extension")
                delete_db() 'Clears all table !
            End If
            ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        Catch ex As Exception
            MessageBox.Show("Error Encontered in line : " & lines(line_count))
            ProgressBar_read.Value = 0
            delete_db()
        End Try
    End Sub

    Public Function parsing_units(ByVal parts() As String)
        If parts(1) = "LB" Then
            parts(1) = "LBF"
        End If
        dtCrtdUnits.Rows.Add(parts(1), parts(3), "BTU", parts(5))
    End Function
    Function ETABS()

        Dim Material_id As Integer = 1
        Dim sec_id As Integer = 1
        Dim loadpattern_id As Integer = 1
        Dim thickness_id_slab As Integer = 1
        Dim thickness_id_wall As Integer = 100
        Dim pointload_id As Integer = 1
        Dim Material_name As String
        Dim Specific_Heat As Double
        Dim Heat_Conduction As Double
        Dim Damping_Ratio As Double
        Dim Modulus_Of_Elasticity As Double
        Dim Poisons_Ratio As Double
        Dim Thermal_Coeff As Double
        Dim Weight_Density As Double
        Dim nodes As New List(Of String)()

        Dim lineload_ct As Integer = 0
        Dim p01 As Double
        Dim p02 As Double
        Dim p03 As Double
        Dim p04 As Double
        Dim p11 As Double
        Dim p12 As Double
        Dim p13 As Double
        Dim p14 As Double
        Dim p21 As Double
        Dim p22 As Double
        Dim p23 As Double
        Dim p24 As Double
        Dim prevpart As String = "123"
        Dim point_chk As Integer = 0

        Dim lnas_chk As Integer = 0
        Dim ll_chk As Integer = 0
        line_count = 0
        ProgressBar_read.Minimum = 0
        ProgressBar_read.Maximum = lines.Length() + lines.Length() / 10
        For i_main_read = 0 To lines.Count - 1
            If line_count < lines.Length() Then
                Dim parts() As String = lines(line_count).Split(New Char() {""""}, StringSplitOptions.RemoveEmptyEntries)
                ProgressBar_read.Value = line_count
                If parts.Length > 1 Then
                    For conv = 0 To parts.Length - 1
                        parts(conv) = parts(conv).Trim()
                    Next

                    If parts(0) = "UNITS" Then
                        units.Checked = True
                        units.Enabled = True
                        If parts(3) = "MICRON" Then
                            MessageBox.Show("Length Units used in Input File are in Micron..not supported by midas GEN...Please Change the Input Units")
                            End
                        End If
                        parsing_units(parts)  ' Writes 
                    End If

                    If parts(0) = "STORY" Then
                        story.Checked = True
                        story.Enabled = True
                        Dim story_pass() As String = parts(2).Split(" ")
                        If parts(1).Length > 14 Then
                            parts(1) = parts(1)
                        End If
                        parsing_story(parts(1), story_pass(1))
                        once = 1
                    End If

                    If once = 1 And parts(0) <> "STORY" Then
                        rearrange_story(dtcrtdstoryorg)
                        once = 2
                    End If

                    If parts(0) = "POINT" Then
                        points.Checked = True
                        points.Enabled = True
                        Dim pt_pass() As String = parts(2).Split(" ")
                        Dim pt0 As Double = Convert.ToDouble(pt_pass(0))
                        Dim pt1 As Double = Convert.ToDouble(pt_pass(1))
                        pt_pass(0) = Math.Round(pt0, 3, MidpointRounding.AwayFromZero)
                        pt_pass(1) = Math.Round(pt1, 3, MidpointRounding.AwayFromZero)
                        If pt_pass.Count = 2 Then
                            dtcrtdnodeorg.Rows.Add(parts(1), pt_pass(0), pt_pass(1), 0)
                        End If
                        If pt_pass.Count = 3 Then
                            dtcrtdnodeorg.Rows.Add(parts(1), pt_pass(0), pt_pass(1), pt_pass(2))
                        End If
                        point_chk = 1
                    End If

                    If parts(0) <> "POINT" And point_chk = 1 Then
                        nodenumber = 1
                        tot_org_nodes = dtcrtdnodeorg.Rows.Count
                        For l1 = 0 To dtStorydata.Rows.Count - 1
                            For l2 = 0 To dtcrtdnodeorg.Rows.Count - 1
                                parsing_node(nodenumber, dtcrtdnodeorg.Rows(l2).Item("X1"), dtcrtdnodeorg.Rows(l2).Item("X2"), dtStorydata.Rows(l1).Item("Story_height") - dtcrtdnodeorg.Rows(l2).Item("Z_dash"), dtcrtdnodeorg.Rows(l2).Item("Node_Number_org"), dtStorydata.Rows(l1).Item("Story_name"))
                                nodenumber = nodenumber + 1
                            Next
                        Next
                        point_chk = 0
                        storydata_count = dtStorydata.Rows.Count - 1
                        node_count_infunc = dtCrtdNode.Rows.Count - 1
                    End If

                    If parts(0) = "LINE" Then
                        element_conn.Checked = True
                        element_conn.Enabled = True
                        parsing_elem_conn(parts(1), parts(3), parts(5), parts(6))
                    End If

                    If parts(0) = "LINEASSIGN" Then
                        sections.Checked = True
                        sections.Enabled = True
                        If parts(4) = "SECTION" Then
                            parsing_lineassign(parts(1), parts(3), parts(5))
                        End If

                    End If

                    If parts(0) = "POINTASSIGN" Then
                        constraints.Checked = True
                        constraints.Enabled = True
                        Dim lastnonempty As Integer = -1
                        For k As Integer = 0 To parts.Count - 1
                            If parts(k) <> "" Then
                                lastnonempty = lastnonempty + 1
                                parts(lastnonempty) = parts(k)
                            End If
                        Next
                        If lastnonempty < 0 Then
                            lastnonempty = 0
                        End If
                        ReDim Preserve parts(lastnonempty)

                        For ii = 0 To parts.Count - 1
                            parts(ii) = parts(ii).Trim
                        Next
                        If parts(3) = "RESTRAINT" Then
                            Dim dx As String = 0
                            Dim dy As String = 0
                            Dim dz As String = 0
                            Dim rx As String = 0
                            Dim ry As String = 0
                            Dim rz As String = 0

                            Dim bc_pass() As String = parts(4).Split(" ")
                            For i_bc = 0 To bc_pass.Length - 1

                                If bc_pass(i_bc) = "UX" Then
                                    dx = 1
                                End If
                                If bc_pass(i_bc) = "UY" Then
                                    dy = 1
                                End If
                                If bc_pass(i_bc) = "UZ" Then
                                    dz = 1
                                End If
                                If bc_pass(i_bc) = "RX" Then
                                    rx = 1
                                End If
                                If bc_pass(i_bc) = "RY" Then
                                    ry = 1
                                End If
                                If bc_pass(i_bc) = "RZ" Then
                                    rz = 1
                                End If
                            Next
                            parsing_pointassign(parts(1), parts(2), dx, dy, dz, rx, ry, rz)
                        End If

                        If parts(3) = "SPRINGPROP" Then
                            parsing_pointassign_spring(parts(1), parts(2), parts(4))
                        End If
                    End If

                    If parts(0) = "MATERIAL" Then
                        material.Checked = True
                        material.Enabled = True
                        Dim material_type As String = "USER"
                        If parts(3) = "Rebar" Then
                            For inline = 0 To 1 '3
                                Dim parts_inline_mat() As String = lines(line_count + inline).Split(New Char() {""""}, StringSplitOptions.RemoveEmptyEntries)
                                For conv = 0 To parts_inline_mat.Length - 1
                                    parts_inline_mat(conv) = parts_inline_mat(conv).Trim()
                                Next
                                If inline = 0 Then
                                    Material_name = parts_inline_mat(1)
                                    If Material_name.Length > 14 Then
                                        Material_name = Material_name
                                    End If
                                    Dim parts_inline_mat_split() As String = parts_inline_mat(parts.Count - 1).Split(" ")
                                    Weight_Density = parts_inline_mat_split(1)
                                End If
                                If inline = 1 Then
                                    Dim parts_inline_mat_split() As String = parts_inline_mat(parts.Count - 1).Split(New Char() {" "}, StringSplitOptions.RemoveEmptyEntries)
                                    Modulus_Of_Elasticity = parts_inline_mat_split(1)
                                    Thermal_Coeff = parts_inline_mat_split(3)
                                    Poisons_Ratio = 0.2
                                End If
                            Next
                            Specific_Heat = 0
                            Heat_Conduction = 0
                            Damping_Ratio = 0.05
                            line_count = line_count + 3
                        End If

                        If parts(3) = "Concrete" Then
                            material_type = "CONC"
                            For inline = 0 To 1 '3
                                Dim parts_inline_mat() As String = lines(line_count + inline).Split(New Char() {""""}, StringSplitOptions.RemoveEmptyEntries)
                                For conv = 0 To parts_inline_mat.Length - 1
                                    parts_inline_mat(conv) = parts_inline_mat(conv).Trim()
                                Next
                                If inline = 0 Then
                                    Material_name = parts_inline_mat(1)
                                    If Material_name.Length > 14 Then
                                        Material_name = Material_name
                                    End If
                                    Dim parts_inline_mat_split() As String = parts_inline_mat(parts.Count - 1).Split(" ")
                                    Weight_Density = parts_inline_mat_split(1)
                                End If
                                If inline = 1 Then
                                    Dim parts_inline_mat_split() As String
                                    If parts(4) = "NOTES" Then
                                        Dim parts_inline_mat1() As String = lines(line_count).Split(New Char() {""""}, StringSplitOptions.RemoveEmptyEntries)
                                        parts_inline_mat_split = parts_inline_mat1(6).Split(New Char() {" "}, StringSplitOptions.RemoveEmptyEntries)
                                        Weight_Density = parts_inline_mat_split(1)
                                    Else
                                        parts_inline_mat_split = parts_inline_mat(parts.Count - 1).Split(New Char() {" "}, StringSplitOptions.RemoveEmptyEntries)
                                        Modulus_Of_Elasticity = parts_inline_mat_split(1)
                                        Thermal_Coeff = parts_inline_mat_split(5)
                                        Poisons_Ratio = parts_inline_mat_split(3)
                                    End If

                                End If
                            Next

                            Specific_Heat = 0
                            Heat_Conduction = 0
                            Damping_Ratio = 0.05
                            line_count = line_count + 3
                        End If

                        If parts(3) = "Steel" Then
                            material_type = "STEEL"
                            For inline = 0 To 1 '3
                                Dim parts_inline_mat() As String = lines(line_count + inline).Split(New Char() {""""}, StringSplitOptions.RemoveEmptyEntries)
                                For conv = 0 To parts_inline_mat.Length - 1
                                    parts_inline_mat(conv) = parts_inline_mat(conv).Trim()
                                Next
                                If inline = 0 Then
                                    Material_name = parts_inline_mat(1)
                                    If Material_name.Length > 14 Then
                                        Material_name = Material_name
                                    End If
                                    Dim parts_inline_mat_split() As String = parts_inline_mat(parts.Count - 1).Split(" ")
                                    Weight_Density = parts_inline_mat_split(1)
                                End If
                                If inline = 1 Then
                                    Dim parts_inline_mat_split() As String = parts_inline_mat(parts.Count - 1).Split(New Char() {" "}, StringSplitOptions.RemoveEmptyEntries)
                                    Modulus_Of_Elasticity = parts_inline_mat_split(1)
                                    Thermal_Coeff = parts_inline_mat_split(5)
                                    Poisons_Ratio = parts_inline_mat_split(3)
                                End If
                            Next

                            Specific_Heat = 0
                            Heat_Conduction = 0
                            Damping_Ratio = 0.05
                            line_count = line_count + 3
                        End If

                        If parts(3) = "Tendon" Then
                            material_type = "STEEL"
                            For inline = 0 To 1 '3
                                Dim parts_inline_mat() As String = lines(line_count + inline).Split(New Char() {""""}, StringSplitOptions.RemoveEmptyEntries)
                                For conv = 0 To parts_inline_mat.Length - 1
                                    parts_inline_mat(conv) = parts_inline_mat(conv).Trim()
                                Next
                                If inline = 0 Then
                                    Material_name = parts_inline_mat(1)
                                    If Material_name.Length > 14 Then
                                        Material_name = Material_name
                                    End If
                                    Dim parts_inline_mat_split() As String = parts_inline_mat(parts.Count - 1).Split(" ")
                                    Weight_Density = parts_inline_mat_split(1)
                                End If
                                If inline = 1 Then
                                    Dim parts_inline_mat_split() As String = parts_inline_mat(parts.Count - 1).Split(New Char() {" "}, StringSplitOptions.RemoveEmptyEntries)
                                    Modulus_Of_Elasticity = parts_inline_mat_split(1)
                                    'Thermal_Coeff = parts_inline_mat_split(5)
                                    Poisons_Ratio = parts_inline_mat_split(3)
                                End If
                            Next

                            Specific_Heat = 0
                            Heat_Conduction = 0
                            Damping_Ratio = 0.05
                            line_count = line_count + 3
                        End If

                        If parts(3) = "Other" Then
                            For inline = 0 To 1 '6
                                Dim parts_inline_mat() As String = lines(line_count + inline).Split(New Char() {""""}, StringSplitOptions.RemoveEmptyEntries)
                                For conv = 0 To parts_inline_mat.Length - 1
                                    parts_inline_mat(conv) = parts_inline_mat(conv).Trim()
                                Next
                                If inline = 0 Then
                                    Material_name = parts_inline_mat(1)
                                    If Material_name.Length > 14 Then
                                        Material_name = Material_name
                                    End If
                                    Dim parts_inline_mat_split() As String = parts_inline_mat(4).Split(" ")
                                    If parts_inline_mat_split.Length < 2 Then
                                        parts_inline_mat_split = parts_inline_mat(6).Split(" ")
                                        Weight_Density = parts_inline_mat_split(1)
                                    Else
                                        Weight_Density = parts_inline_mat_split(1)
                                    End If

                                End If
                                If inline = 1 Then
                                    Dim parts_inline_mat_split() As String = parts_inline_mat(4).Split(New Char() {" "}, StringSplitOptions.RemoveEmptyEntries)
                                    Modulus_Of_Elasticity = parts_inline_mat_split(1)
                                    Thermal_Coeff = parts_inline_mat_split(5)
                                    Poisons_Ratio = parts_inline_mat_split(3)
                                End If
                            Next

                            Specific_Heat = 0
                            Heat_Conduction = 0
                            Damping_Ratio = 0.05
                            line_count = line_count + 6
                        End If
                        parsing_material(Material_id, Material_name, Specific_Heat, Heat_Conduction, Damping_Ratio, Modulus_Of_Elasticity, Poisons_Ratio, Thermal_Coeff, Weight_Density, material_type)
                        Material_id = Material_id + 1

                    End If

                    If parts(0) = "FRAMESECTION" Then
                        Dim lastnonempty As Integer = -1
                        For k As Integer = 0 To parts.Count - 1
                            If parts(k) <> "" Then
                                lastnonempty = lastnonempty + 1
                                parts(lastnonempty) = parts(k)
                            End If
                        Next
                        If lastnonempty < 0 Then
                            lastnonempty = 0
                        End If
                        ReDim Preserve parts(lastnonempty)
                        section_assignment.Checked = True
                        section_assignment.Enabled = True
                        If parts.Count > 5 Then
                            If parts(5) <> "SD Section" And parts.Count > 6 Then
                                If parts(6) <> "FILE" Then
                                    Dim parts_dim() As String = parts(6).Split(" ".ToCharArray(), StringSplitOptions.RemoveEmptyEntries)
                                    Dim parts_shape() As String = parts(5).Split(" ")
                                    If parts(1).Length > 14 Then
                                        parts(1) = parts(1)
                                    End If
                                    If parts(5) = "Concrete Circle" Then
                                        parsing_section(sec_id, parts(1), parts(3), parts_shape(0), parts(5), parts_dim(1), 0, 0, 0, 0, 0, 0, 0)
                                        sec_id = sec_id + 1
                                    ElseIf CStr(parts(5)).IndexOf("Concrete Rectangular") > -1 Then
                                        parsing_section(sec_id, parts(1), parts(3), parts_shape(0), parts(5), parts_dim(1), parts_dim(3), 0, 0, 0, 0, 0, 0)
                                        sec_id = sec_id + 1
                                    ElseIf parts(5) = "Steel I/Wide Flange" Then
                                        parsing_section(sec_id, parts(1), parts(3), parts_shape(0), parts(5), parts_dim(1), parts_dim(3), parts_dim(5), parts_dim(7), 0, 0, 0, 0)
                                        sec_id = sec_id + 1
                                    ElseIf parts(5) = "Steel Channel" Then
                                        parsing_section(sec_id, parts(1), parts(3), parts_shape(0), parts(5), parts_dim(1), parts_dim(3), parts_dim(5), parts_dim(7), 0, 0, 0, 0)
                                        sec_id = sec_id + 1
                                    ElseIf parts(5) = "Steel Tee" Then
                                        parsing_section(sec_id, parts(1), parts(3), parts_shape(0), parts(5), parts_dim(1), parts_dim(3), parts_dim(5), parts_dim(7), 0, 0, 0, 0)
                                        sec_id = sec_id + 1
                                    ElseIf parts(5) = "Steel Angle" Then
                                        parsing_section(sec_id, parts(1), parts(3), parts_shape(0), parts(5), parts_dim(1), parts_dim(3), parts_dim(5), parts_dim(7), 0, 0, 0, 0)
                                        sec_id = sec_id + 1
                                    ElseIf parts(5) = "Steel Double Channel" Then
                                        parsing_section(sec_id, parts(1), parts(3), parts_shape(0), parts(5), parts_dim(1), parts_dim(3), parts_dim(5), parts_dim(7), parts_dim(9), 0, 0, 0)
                                        sec_id = sec_id + 1
                                    ElseIf parts(5) = "Steel Double Angle" Then
                                        parsing_section(sec_id, parts(1), parts(3), parts_shape(0), parts(5), parts_dim(1), parts_dim(3), parts_dim(5), parts_dim(7), parts_dim(9), 0, 0, 0)
                                        sec_id = sec_id + 1
                                    ElseIf parts(5) = "Steel Pipe" Then
                                        parsing_section(sec_id, parts(1), parts(3), parts_shape(0), parts(5), parts_dim(1), parts_dim(3), 0, 0, 0, 0, 0, 0)
                                        sec_id = sec_id + 1
                                    ElseIf CStr(parts(5)).IndexOf("Concrete Encasement Rectangle") > -1 Then
                                        parsing_section(sec_id, parts(1), parts(3), parts_shape(0), parts(5), parts_dim(1), parts_dim(3), 0, 0, 0, 0, 0, 0)
                                        sec_id = sec_id + 1
                                    ElseIf CStr(parts(5)).IndexOf("Filled Steel Tube") > -1 Then
                                        parsing_section(sec_id, parts(1), parts(3), parts_shape(0), parts(5), parts_dim(1), parts_dim(3), parts_dim(5), parts_dim(7), 0, 0, 0, 0)
                                        sec_id = sec_id + 1
                                    ElseIf CStr(parts(5)).IndexOf("Filled Steel Pipe") > -1 Then
                                        parsing_section(sec_id, parts(1), parts(3), parts_shape(0), parts(5), parts_dim(1), parts_dim(3), 0, 0, 0, 0, 0, 0)
                                        sec_id = sec_id + 1
                                    ElseIf CStr(parts(5)).IndexOf("Steel Tube") > -1 Then
                                        parsing_section(sec_id, parts(1), parts(3), parts_shape(0), parts(5), parts_dim(1), parts_dim(3), parts_dim(5), parts_dim(7), 0, 0, 0, 0)
                                        sec_id = sec_id + 1
                                    Else
                                        parsing_section(sec_id, parts(1), parts(3), parts_shape(0), parts(5), parts_dim(1), parts_dim(3), 0, 0, 0, 0, 0, 0)
                                        sec_id = sec_id + 1
                                    End If
                                Else
                                    parsing_section(sec_id, parts(1), parts(3), "Steel", "Undefined", 0.1, 0.1, 0, 0, 0, 0, 0, 0)
                                    sec_id = sec_id + 1
                                End If
                            Else
                                parsing_section(sec_id, parts(1), "STEEL", "Steel", "Undefined", 0.1, 0.1, 0, 0, 0, 0, 0, 0)
                                sec_id = sec_id + 1
                            End If

                        ElseIf parts.Count = 3 Then
                            parsing_modifier(parts(1), parts(2))
                        Else
                            parsing_section(sec_id, parts(1), "Steel", "Steel", "Undefined", 0.1, 0.1, 0, 0, 0, 0, 0, 0)
                            sec_id = sec_id + 1
                        End If
                    End If

                    If parts(0) = "LOADPATTERN" Then
                        load_pattern.Checked = True
                        load_pattern.Enabled = True
                        parsing_loadpattern(loadpattern_id, parts(1), parts(3))
                        loadpattern_id = loadpattern_id + 1
                    End If

                    If parts(0) = "POINTLOAD" Then
                        point_loads.Checked = True
                        point_loads.Enabled = True
                        Dim lastnonempty As Integer = -1
                        For k As Integer = 0 To parts.Count - 1
                            If parts(k) <> "" Then
                                lastnonempty = lastnonempty + 1
                                parts(lastnonempty) = parts(k)
                            End If
                        Next
                        If lastnonempty < 0 Then
                            lastnonempty = 0
                        End If
                        ReDim Preserve parts(lastnonempty)
                        parsing_pointload(pointload_id, parts(1), parts(2), parts(6), parts(7))
                        pointload_id = pointload_id + 1
                    End If

                    If parts(0) = "LINELOAD" Then
                        line_loads.Checked = True
                        line_loads.Enabled = True
                        If lnas_chk = 0 Then
                            rearrange_elem()
                            lnas_chk = 1
                            ll_chk = 1
                        End If
                        Dim lastnonempty As Integer = -1
                        For k As Integer = 0 To parts.Count - 1
                            If parts(k) <> "" Then
                                lastnonempty = lastnonempty + 1
                                parts(lastnonempty) = parts(k)
                            End If
                        Next
                        If lastnonempty < 0 Then
                            lastnonempty = 0
                        End If
                        ReDim Preserve parts(lastnonempty)

                        If parts(4) = "POINTF" Then
                            Dim parts_brk() As String = parts(9).Split(" ".ToCharArray(), StringSplitOptions.RemoveEmptyEntries)
                            parsing_lineload(parts(1), parts(2), parts(8), parts(6), parts_brk(1), 0, parts_brk(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, "CONLOAD")
                        End If
                        If parts(4) = "UNIFF" Then
                            Dim parts_brk() As String = parts(9).Split(" ".ToCharArray(), StringSplitOptions.RemoveEmptyEntries)
                            parsing_lineload(parts(1), parts(2), parts(8), parts(6), parts_brk(1), parts_brk(1), 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, "UNILOAD")
                        End If
                        If parts(4) = "TRAPF" Then
                            Dim parts_brk() As String = parts(9).Split(" ".ToCharArray(), StringSplitOptions.RemoveEmptyEntries)

                            If parts(1) = prevpart Or lineload_ct = 0 Then
                                If lineload_ct = 0 Then
                                    p01 = parts_brk(1)
                                    p02 = parts_brk(3)
                                    p03 = parts_brk(5)
                                    p04 = parts_brk(7)
                                    prevpart = parts(1)
                                End If
                                If lineload_ct = 1 Then
                                    p11 = parts_brk(1)
                                    p12 = parts_brk(3)
                                    p13 = parts_brk(5)
                                    p14 = parts_brk(7)

                                End If
                                If lineload_ct = 2 Then
                                    p21 = parts_brk(1)
                                    p22 = parts_brk(3)
                                    p23 = parts_brk(5)
                                    p24 = parts_brk(7)

                                End If
                                lineload_ct = lineload_ct + 1
                            End If
                            If parts(1) <> prevpart And lineload_ct > 0 Then
                                If lineload_ct = 3 Then
                                    parsing_lineload(parts(1), parts(2), parts(8), parts(6), p01, p02, p03, p04, p11, p12, p13, p14, p21, p22, p23, p24, "UNILOAD")
                                    lineload_ct = 0
                                End If
                                If lineload_ct = 2 Then
                                    parsing_lineload(parts(1), parts(2), parts(8), parts(6), p01, p02, p03, p04, p11, p12, p13, p14, 0, 0, 0, 0, "UNILOAD")
                                    lineload_ct = 0
                                End If
                                If lineload_ct = 1 Then
                                    parsing_lineload(parts(1), parts(2), parts(8), parts(6), p01, p02, p03, p04, 0, 0, 0, 0, 0, 0, 0, 0, "UNILOAD")
                                    lineload_ct = 0
                                End If
                                prevpart = parts(1)
                                line_count = line_count - 1
                            End If
                        End If
                    End If

                    If parts(0) = "AREAASSIGN" Then
                        area_ass.Checked = True
                        area_ass.Enabled = True
                        Dim lastnonempty As Integer = -1
                        For k As Integer = 0 To parts.Count - 1
                            If parts(k) <> "" Then
                                lastnonempty = lastnonempty + 1
                                parts(lastnonempty) = parts(k)
                            End If
                        Next
                        If lastnonempty < 0 Then
                            lastnonempty = 0
                        End If
                        ReDim Preserve parts(lastnonempty)

                        parsing_areaassign(parts(1), parts(2), parts(4))
                    End If

                    If parts(0) = "AREA" Then
                        area_conn.Checked = True
                        area_conn.Enabled = True
                        Dim lastnonempty As Integer = -1
                        For k As Integer = 0 To parts.Count - 1
                            If parts(k) <> "" Then
                                lastnonempty = lastnonempty + 1
                                parts(lastnonempty) = parts(k)
                            End If
                        Next
                        If lastnonempty < 0 Then
                            lastnonempty = 0
                        End If
                        ReDim Preserve parts(lastnonempty)

                        Dim p_split() As String = parts(2).Split(" ".ToCharArray(), StringSplitOptions.RemoveEmptyEntries)
                        Dim nn As Integer = p_split(1)

                        For i_area = 0 To nn - 1
                            nodes.Add(parts(3 + i_area))
                        Next
                        Dim nodes_array As String() = nodes.ToArray()
                        If nodes_array.Count <= 4 Then
                            parsing_area_conn(parts(1), nodes_array, parts(3 + nn), 1) ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
                        Else
                            ' Dim points() As PointF
                            Dim m_Points() As PointF = {}
                            Dim rn As Integer = 0
                            For j = 0 To nodes_array.Count - 1
                                rn = 0
                                For Each row As DataRow In dtcrtdnodeorg.Rows
                                    If nodes_array(j) = dtcrtdnodeorg.Rows(rn).Item("Node_Number_org") Then
                                        AddVertex(CSng(dtcrtdnodeorg.Rows(rn).Item("X1")), CSng(dtcrtdnodeorg.Rows(rn).Item("X2")), 0)
                                        ReDim Preserve m_Points(nodes_array.Count)
                                        m_Points(j) = New PointF(CSng(dtcrtdnodeorg.Rows(rn).Item("X1")), CSng(dtcrtdnodeorg.Rows(rn).Item("X2")))
                                    End If
                                    rn = rn + 1
                                Next
                            Next

                            Dim nodes_ind As New List(Of String)()
                            Dim node_string() As String = CalculateTriangles()
                            For k = 0 To node_string.Count - 1
                                Dim nodes_array_index() As String = node_string(k).Split(",")
                                Dim chk_inside As Integer = 1
                                If node_string.Count > nodes_array.Count - 2 Then
                                    chk_inside = 0
                                    Dim cgx As Single = 0
                                    Dim cgy As Single = 0
                                    Dim chk_1 As Integer = 0
                                    Dim chk_2 As Integer = 0
                                    Dim chk_3 As Integer = 0
                                    For lp_var = 0 To dtcrtdnodeorg.Rows.Count - 1
                                        If nodes_array(nodes_array_index(0)) = dtcrtdnodeorg.Rows(lp_var).Item("Node_Number_org") Then
                                            cgx = cgx + dtcrtdnodeorg.Rows(lp_var).Item("X1") / 3
                                            cgy = cgy + dtcrtdnodeorg.Rows(lp_var).Item("X2") / 3
                                            chk_1 = 1
                                        End If
                                        If nodes_array(nodes_array_index(1)) = dtcrtdnodeorg.Rows(lp_var).Item("Node_Number_org") Then
                                            cgx = cgx + dtcrtdnodeorg.Rows(lp_var).Item("X1") / 3
                                            cgy = cgy + dtcrtdnodeorg.Rows(lp_var).Item("X2") / 3
                                            chk_2 = 2
                                        End If
                                        If nodes_array(nodes_array_index(2)) = dtcrtdnodeorg.Rows(lp_var).Item("Node_Number_org") Then
                                            cgx = cgx + dtcrtdnodeorg.Rows(lp_var).Item("X1") / 3
                                            cgy = cgy + dtcrtdnodeorg.Rows(lp_var).Item("X2") / 3
                                            chk_3 = 3
                                        End If
                                        If chk_1 = 1 And chk_2 = 1 And chk_3 = 1 Then
                                            Exit For
                                        End If
                                    Next
                                    Dim return_chk As Boolean = PointInPolygon(m_Points, cgx, cgy)
                                    If return_chk = True Then
                                        chk_inside = 1
                                    Else
                                        chk_inside = 0
                                    End If
                                End If
                                If chk_inside = 1 Then
                                    For i_ind = 0 To 2
                                        nodes_ind.Add(nodes_array(nodes_array_index(i_ind)))
                                    Next
                                End If
                                Dim nodes_array_ind As String() = nodes_ind.ToArray()
                                Dim conc_check As Integer = 0
                                conc_check = straight_line_check(nodes_array_ind)
                                If conc_check = 1 Then
                                    parsing_area_conn(parts(1), nodes_array_ind, parts(3 + nn), 1)
                                End If

                                nodes_ind.Clear()
                            Next
                            EmptyVertexList()
                        End If
                        nodes.Clear()
                    End If

                    If parts(0) = "SHELLPROP" Then
                        thicknesses.Checked = True
                        thicknesses.Enabled = True
                        If parts.Count > 8 Then
                            If parts(3) = "Slab" Then
                                Dim th_parts() As String = parts(parts.Count - 1).Split(" ".ToCharArray(), StringSplitOptions.RemoveEmptyEntries)
                                parsing_thickness(thickness_id_slab, parts(1), parts(5), th_parts(1))
                                thickness_id_slab = thickness_id_slab + 1
                            End If
                            If parts(3) = "Wall" Then
                                Dim th_parts() As String = parts(parts.Count - 1).Split(" ".ToCharArray(), StringSplitOptions.RemoveEmptyEntries)
                                parsing_thickness(thickness_id_wall, parts(1), parts(5), th_parts(1))
                                thickness_id_wall = thickness_id_wall + 1
                            End If
                        End If
                    End If

                    'If line_count > 56700 Then
                    '    MessageBox.Show("BDIYHSB")
                    'End If

                    If parts(0) = "AREALOAD" Then
                        area_loading.Checked = True
                        area_loading.Enabled = True
                        Dim lastnonempty As Integer = -1
                        For k As Integer = 0 To parts.Count - 1
                            If parts(k) <> "" Then
                                lastnonempty = lastnonempty + 1
                                parts(lastnonempty) = parts(k)
                            End If
                        Next
                        If lastnonempty < 0 Then
                            lastnonempty = 0
                        End If
                        ReDim Preserve parts(lastnonempty)
                        If parts.Count > 8 Then
                            Dim prt_brk() As String = parts(9).Split(" ".ToCharArray(), StringSplitOptions.RemoveEmptyEntries)
                            parsing_areaload(parts(1), parts(2), parts(4), parts(6), parts(8), prt_brk(1))
                        End If
                        If parts.Count = 6 And parts(4) = "UNIFLOADSET" Then
                            For i_ld = 0 To dt_loadset.Rows.Count - 1
                                If dt_loadset.Rows(i_ld).Item("Loadset_name") = parts(5) Then
                                    parsing_areaload(parts(1), parts(2), "UNIFF", "GRAV", dt_loadset.Rows(i_ld).Item("Loadset_pattern"), dt_loadset.Rows(i_ld).Item("Loadset_magnitude"))
                                End If

                            Next

                        End If
                    End If

                    If parts(0) = "SHELLUNIFORMLOADSET" Then
                        unifloadset.Enabled = True
                        unifloadset.Checked = True
                        Dim lastnonempty As Integer = -1
                        For k As Integer = 0 To parts.Count - 1
                            If parts(k) <> "" Then
                                lastnonempty = lastnonempty + 1
                                parts(lastnonempty) = parts(k)
                            End If
                        Next
                        If lastnonempty < 0 Then
                            lastnonempty = 0
                        End If
                        ReDim Preserve parts(lastnonempty)
                        Dim parts_break() As String = parts(4).Split(" ".ToCharArray(), StringSplitOptions.RemoveEmptyEntries)
                        parsing_loadset(parts(1), parts(3), parts_break(1))
                    End If

                    If parts(0) = "POINTSPRING" Then
                        constraints.Checked = True
                        constraints.Enabled = True
                        parsing_pointsprings(parts(1), parts(2))
                    End If

                End If
                line_count = line_count + 1
            End If
            Application.DoEvents()
        Next i_main_read

        out_path = in_path & "\" & only_file_name & ".mgt"

        '    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''JUST CHECKING''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        'out_path_2 = in_path & "org.txt"
        'Using out_file_2 As New StreamWriter(out_path_2)
        '    For Each row As DataRow In dtarea_conn.Rows
        '        out_file_2.WriteLine(row("N1") & ", " & row("N2") & ", " & row("N3") & ", " & row("N4"))
        '    Next

        '    '    For Each row As DataRow In dtcrtdlineassign.Rows
        '    '        out_file_2.WriteLine(row("la_uq_elem") & ", " & row("la_story") & ", " & row("la_section"))
        '    '    Next

        '    '    For Each row As DataRow In dtStorydata.Rows
        '    '        out_file_2.WriteLine(row("la_uq_elem") & ", " & row("la_story") & ", " & row("la_section"))
        '    '    Next

        'End Using
        '    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''END CHECKING'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        If ll_chk = 0 Then
            rearrange_elem()
            ll_chk = 1
        End If

        elem_section()
        area_element()

        If dtboundary_conditions.Rows.Count = 0 Then
            MessageBox.Show("Boundary Conditions Should be given by the User. Press OK to Continue file writting")
        End If
        ProgressBar_read.Value = ProgressBar_read.Maximum
        Using out_file As New StreamWriter(out_path)
            ProgressBar_writing.Minimum = 0
            ProgressBar_writing.Maximum = 10
            writing_units(out_file)
            ProgressBar_writing.Value = 1
            Application.DoEvents()
            writing_node(out_file)
            ProgressBar_writing.Value = 2
            Application.DoEvents()
            writing_elem(out_file)
            ProgressBar_writing.Value = 3
            Application.DoEvents()
            'writing_story(out_file)
            writing_BoundaryConditions(out_file)
            writting_spring(out_file)
            ProgressBar_writing.Value = 4
            Application.DoEvents()
            writing_material(out_file)
            ProgressBar_writing.Value = 5
            Application.DoEvents()
            writing_thickness(out_file)
            ProgressBar_writing.Value = 6
            Application.DoEvents()
            writing_section(out_file)
            ProgressBar_writing.Value = 7
            Application.DoEvents()
            writing_modifier(out_file)
            ProgressBar_writing.Value = 8
            Application.DoEvents()
            writing_loadpattern(out_file)
            ProgressBar_writing.Value = 9
            Application.DoEvents()
            writing_load(out_file)
            ProgressBar_writing.Value = 10
            Application.DoEvents()
            'writing_floadtype(out_file)
            ' areaload_floorload()
            'writing_floorload(out_file)
            MessageBox.Show("Writting Completed." & vbNewLine & "Location :  " & CStr(out_path))

            Process.Start(out_path)
        End Using
        delete_db()
    End Function
    Private Sub browse_button_Click(sender As Object, e As EventArgs) Handles browse_button.Click
        ' MessageBox.Show("Make sure all the elements are USER DEFINED")
        OpenFileDialog.Title = "Enter the input file"
        OpenFileDialog.Filter = "ETABS Text Files (*.$et, *e2k)|*.$et;*.e2k|SAFE Files (*.$ft, *f2k)|*.$ft;*.f2k|All Files (*.*)|*.*"
        OpenFileDialog.ShowDialog()
        file_name = OpenFileDialog.FileName()
        extension = Path.GetExtension(file_name) '''''''
        If file_name <> "NO_FILE_SELECTED" Then
            path_disp.Text = file_name
            in_path = Path.GetDirectoryName(file_name)
            only_file_name = Path.GetFileNameWithoutExtension(file_name) ' Limited extension
            If extension = ".$et" Or extension = ".e2k" Or extension = ".$ET" Or extension = ".E2K" Then
                lines = File.ReadAllLines(file_name)
                '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
            ElseIf extension = ".$ft" Or extension = ".f2k" Or extension = ".$FT" Or extension = ".F2K" Then
                lines = Split(File.ReadAllText(file_name), "TABLE:")

                '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
            End If
            nodenumber = 1
            elementnumber = 1

        End If
            Application.DoEvents()
    End Sub

    Function SAFE()
        FileOpen(2, "Hello.mgt", OpenMode.Output)
        Dim words() As String = lines  ''remove and keep direct lines
        Dim temp As String = ""
        For a = 0 To words.Length - 1
            If words(a).Contains("""PROGRAM CONTROL""") Then
                temp = words(a).Remove(0, 15)
                writeUnits(2, temp, "\bCurrUnits=\s*""\s*(.*)\s*""\s*MergeTol\b")
            End If
        Next
    End Function

    ''' SAFE FUNCTIONS
    Function writeUnits(ByVal s As Integer, ByVal str As String, ByVal patt As String)
        Dim text As String = str
        Dim pattern As String = patt '"\bCurrUnits=(.*)MergeTol\b"
        ' Instantiate the regular expression object.
        Dim r As Regex = New Regex(pattern, RegexOptions.IgnoreCase)
        Dim m As Match = r.Match(text)
        Dim g As Group = m.Groups(1)
        If m.Success Then
            Dim words() As String = g.ToString().Split(New Char() {","c})

            'text = words(0) + "," + words(1) + "," + " BTU" + "," + words(2)
            'PrintLine(s, text)
            'PrintLine(s)
        End If
    End Function
    ''' SAFE FUNTIONS ENDS



    Public Function parsing_node(ByVal nodenumber As Integer, ByVal pt_x As String, ByVal pt_y As String, ByVal story_height As String, ByVal node_org As String, ByVal story_name As String)
        If story_height = 0 Then
            dtCrtdNode.Rows.Add(nodenumber, pt_x, pt_y, story_height, 1, node_org, story_name)
        Else
            dtCrtdNode.Rows.Add(nodenumber, pt_x, pt_y, story_height, 0, node_org, story_name)
        End If
    End Function

    Public Function parsing_elem_conn(ByVal ele_name As String, ByVal i_end As String, ByVal j_end As String, ByVal flr_var As String)
        dtCrtdElem_conn.Rows.Add(elementnumber, ele_name, i_end, j_end, flr_var)
        elementnumber = elementnumber + 1
    End Function

    Public Function parsing_lineassign(ByVal line_name As String, ByVal story_name As String, ByVal sec_name As String)
        dtcrtdlineassign.Rows.Add(line_name, story_name, sec_name)
    End Function

    Public Function parsing_story(ByVal st_name As String, ByVal st_height As String)
        dtcrtdstoryorg.Rows.Add(st_name, st_height)
    End Function

    Public Function parsing_pointassign(ByVal node As String, ByVal story As String, ByVal dx As String, ByVal dy As String, ByVal dz As String, ByVal rx As String, ByVal ry As String, ByVal rz As String)
        Dim node_pass As String = 0
        node_pass = func_node_converter(node, story)
        If node_pass <> 0 Then
            dtboundary_conditions.Rows.Add(node_pass, dx, dy, dz, rx, ry, rz)
        End If

    End Function

    Public Function parsing_material(ByVal Material_id As Integer, ByVal material_name As String, ByVal Specific_Heat As Double, ByVal Heat_Conduction As Double, ByVal Damping_Ratio As Double, ByVal Modulus_Of_Elasticity As Double, ByVal Poisons_Ratio As Double, ByVal Thermal_Coeff As Double, ByVal Weight_Density As Double, ByVal material_type As String)
        dtMatgrade.Rows.Add(Material_id, material_name, Specific_Heat, Heat_Conduction, Damping_Ratio, Modulus_Of_Elasticity, Poisons_Ratio, Thermal_Coeff, Weight_Density, material_type)
    End Function

    Public Function parsing_section(ByVal sec_id As Integer, ByVal sec_name As String, ByVal sec_mat As String, ByVal sec_mat_name As String, ByVal sec_shape As String, ByVal d1 As Double, ByVal d2 As Double, ByVal d3 As Double, ByVal d4 As Double, ByVal d5 As Double, ByVal d6 As Double, ByVal d7 As Double, ByVal d8 As Double)
        If sec_shape = "Concrete Circle" Then
            sec_shape = "SR"
            dtProSection.Rows.Add(sec_id, sec_name, sec_mat, sec_mat_name, sec_shape, d1, 0, 0, 0, 0, 0, 0, 0)
        ElseIf sec_shape = "Steel I/Wide Flange" Then
            sec_shape = "H"
            dtProSection.Rows.Add(sec_id, sec_name, sec_mat, sec_mat_name, sec_shape, d1, d2, d4, d3, d2, d3, 0, 0)
        ElseIf sec_shape = "Steel Channel" Then
            sec_shape = "C"
            dtProSection.Rows.Add(sec_id, sec_name, sec_mat, sec_mat_name, sec_shape, d1, d2, d4, d3, d2, d3, 0, 0)
        ElseIf sec_shape = "Steel Tee" Then
            sec_shape = "T"
            dtProSection.Rows.Add(sec_id, sec_name, sec_mat, sec_mat_name, sec_shape, d1, d2, d4, d3, d2, d3, 0, 0)
        ElseIf sec_shape = "Steel Angle" Then
            sec_shape = "L"
            dtProSection.Rows.Add(sec_id, sec_name, sec_mat, sec_mat_name, sec_shape, d1, d2, d4, d3, 0, 0, 0, 0)
        ElseIf sec_shape = "Steel Double Angle" Then
            sec_shape = "2L"
            dtProSection.Rows.Add(sec_id, sec_name, sec_mat, sec_mat_name, sec_shape, d1, d2, d4, d3, d5, 0, 0, 0)
        ElseIf sec_shape = "Steel Double Channel" Then
            sec_shape = "2C"
            dtProSection.Rows.Add(sec_id, sec_name, sec_mat, sec_mat_name, sec_shape, d1, d2, d4, d3, d5, 0, 0, 0)
            'ElseIf sec_shape = "Steel Tube" Then
            '    sec_shape = "H"
            '    dtProSection.Rows.Add(sec_id, sec_name, sec_mat, sec_mat_name, sec_shape, d1, d2, d4, d3, d5, d6, 0, 0)
        ElseIf sec_shape = "Steel Pipe" Then
            sec_shape = "P"
            dtProSection.Rows.Add(sec_id, sec_name, sec_mat, sec_mat_name, sec_shape, d1, d2, 0, 0, 0, 0, 0, 0)
            'ElseIf sec_shape = "Filled Steel Tube" Then
            '    sec_shape = "H"
            '    dtProSection.Rows.Add(sec_id, sec_name, sec_mat, sec_mat_name, sec_shape, d1, d2, d4, d3, d5, d6, 0, 0)
            'ElseIf sec_shape = "Filled Steel Pipe" Then
            '    sec_shape = "H"
            '    dtProSection.Rows.Add(sec_id, sec_name, sec_mat, sec_mat_name, sec_shape, d1, d2, d4, d3, d5, d6, 0, 0)
        ElseIf sec_shape = "Concrete Rectangular" Then
            sec_shape = "SB"
            dtProSection.Rows.Add(sec_id, sec_name, sec_mat, sec_mat_name, sec_shape, d1, d2, d4, d3, d5, d6, 0, 0)
        ElseIf sec_shape = "Steel Box" Then
            sec_shape = "B"
            dtProSection.Rows.Add(sec_id, sec_name, sec_mat, sec_mat_name, sec_shape, d1, d2, d4, d3, 0, d3, 0, 0)
        ElseIf sec_shape = "Filled" Then
            sec_shape = "B"
            dtProSection.Rows.Add(sec_id, sec_name, sec_mat, sec_mat_name, sec_shape, d1, d2, d4, d3, 0, d3, 0, 0)
        ElseIf sec_shape = "Concrete Encasement Rectangle" Then
            sec_shape = "SB"
            dtProSection.Rows.Add(sec_id, sec_name, sec_mat, sec_mat_name, sec_shape, d1, d2, d4, d3, d5, d6, 0, 0)
        ElseIf sec_shape = "Filled Steel Tube" Or sec_shape = "Steel Tube" Then
            sec_shape = "SB"
            dtProSection.Rows.Add(sec_id, sec_name, sec_mat, sec_mat_name, sec_shape, d1, d2, d4, d3, d5, d6, 0, 0)
        ElseIf sec_shape = "Filled Steel Pipe" Then
            sec_shape = "SB"
            dtProSection.Rows.Add(sec_id, sec_name, sec_mat, sec_mat_name, sec_shape, d1, d2, d4, d3, d5, d6, 0, 0)
        Else
            sec_shape = "SB"
            dtProSectionUndef.Rows.Add(sec_id, sec_name, sec_mat_name)
            sec_name = sec_name + "*"
            dtProSection.Rows.Add(sec_id, sec_name, sec_mat, sec_mat_name, sec_shape, d1, d2, 0, 0, 0, 0, 0, 0)

        End If
    End Function
    'Dim sec_id_mod As Integer = 0
    Public Function parsing_modifier(ByVal sec_name As String, ByVal mods As String)
        Dim mod_brk() As String = mods.Split(New Char() {" "}, StringSplitOptions.RemoveEmptyEntries)

        For l1 = 0 To dtProSection.Rows.Count - 1
            If sec_name = dtProSection.Rows(l1).Item("Section_name") Or CStr(sec_name + "*") = dtProSection.Rows(l1).Item("Section_name") Then
                'sec_id_mod = sec_id_mod + 1
                Dim area_sf As String = "1"
                Dim asy_sf As String = "1"
                Dim asz_sf As String = "1"
                Dim ixx_sf As String = "1"
                Dim iyy_sf As String = "1"
                Dim izz_sf As String = "1"
                Dim wgt_sf As String = "1"
                For i = 0 To mod_brk.Count - 1 Step 2
                    mod_brk(i) = mod_brk(i).Trim
                    If mod_brk(i) = "AMOD" Then
                        area_sf = mod_brk(i + 1)
                    ElseIf mod_brk(i) = "A2MOD" Then
                        asy_sf = mod_brk(i + 1)
                    ElseIf mod_brk(i) = "A3MOD" Then
                        asz_sf = mod_brk(i + 1)
                    ElseIf mod_brk(i) = "JMOD" Then
                        ixx_sf = mod_brk(i + 1)
                    ElseIf mod_brk(i) = "I2MOD" Then
                        iyy_sf = mod_brk(i + 1)
                    ElseIf mod_brk(i) = "I3MOD" Then
                        izz_sf = mod_brk(i + 1)
                    ElseIf mod_brk(i) = "WMOD" Then
                        wgt_sf = mod_brk(i + 1)
                    End If
                Next
                dtmodifier.Rows.Add(dtProSection.Rows(l1).Item("Section_id"), area_sf, asy_sf, asz_sf, ixx_sf, iyy_sf, izz_sf, "1", wgt_sf)
            End If
        Next
    End Function

    Public Function parsing_loadpattern(ByVal lp_id As Integer, ByVal pattern_name As String, ByVal pattern_type As String)                 'JUST CHECK IF THE LOAD PATTERNS ARE MATCHING WITH ETABS INPUT FILE
        If pattern_type = "Dead" Then
            pattern_type = "D"
        ElseIf pattern_type = "Live" Then
            pattern_type = "L"
        ElseIf pattern_type = "Wind" Then
            pattern_type = "W"
        ElseIf pattern_type = "Seismic" Then
            pattern_type = "E"
        ElseIf pattern_type = "Other" Then
            pattern_type = "USER"
        ElseIf pattern_type = "Roof Live" Then
            pattern_type = "LR"
        ElseIf pattern_type = "Snow" Then
            pattern_type = "S"
        ElseIf pattern_type = "Construction" Then
            pattern_type = "CS"
        ElseIf pattern_type = "Super dead" Then
            pattern_type = "D"
        Else
            pattern_type = "USER"
        End If
        dtload_pattern.Rows.Add(lp_id, pattern_name, pattern_type)
    End Function

    Public Function parsing_pointload(ByVal p_id As Integer, ByVal node As Integer, ByVal story As String, ByVal load_name As String, ByVal prtid As String)
        Dim node_pass As String
        Dim n As Integer = 0
        Dim FX_V As Double
        Dim FY_V As Double
        Dim FZ_V As Double
        Dim MX_V As Double
        Dim MY_V As Double
        Dim MZ_V As Double
        node_pass = func_node_converter(node, story)
        Dim prtid_1() As String = prtid.Split(" ".ToCharArray(), StringSplitOptions.RemoveEmptyEntries)

        For i = 0 To prtid_1.Count - 1 Step 2
            If prtid_1(i) = "FX" Then
                FX_V = prtid_1(i + 1)
            End If
            If prtid_1(i) = "FY" Then
                FY_V = prtid_1(i + 1)
            End If
            If prtid_1(i) = "FZ" Then
                FZ_V = prtid_1(i + 1)
            End If
            If prtid_1(i) = "MX" Then
                MX_V = prtid_1(i + 1)
            End If
            If prtid_1(i) = "MX" Then
                MY_V = prtid_1(i + 1)
            End If
            If prtid_1(i) = "MX" Then
                MZ_V = prtid_1(i + 1)
            End If
        Next
        dtNodalLoads.Rows.Add(p_id, node_pass, FX_V, FY_V, FZ_V, MX_V, MY_V, MZ_V, load_name)
    End Function

    Public Function parsing_lineload(ByVal ele_type As String, ByVal story As String, ByVal lc_name As String, ByVal lc_dir As String, ByVal p01 As String, ByVal p02 As String, ByVal p03 As Double, ByVal p04 As Double, ByVal p11 As String, ByVal p12 As String, ByVal p13 As String, ByVal p14 As String, ByVal p21 As String, ByVal p22 As String, ByVal p23 As Double, ByVal p24 As Double, ByVal tp_to_prt As String)
        Dim ele_number_pass As Integer
        Dim d1 As Double
        Dim p1 As Double
        Dim d2 As Double
        Dim p2 As Double
        Dim d3 As Double
        Dim p3 As Double
        Dim d4 As Double
        Dim p4 As Double
        Dim proj As String = "NO"
        ele_number_pass = func_element_converter(ele_type, story)
        If lc_dir = "GRAV" Then
            lc_dir = "GZ"
            p01 = -p01
            p02 = -p02
            p21 = -p21
            p22 = -p22
        End If
        If lc_dir = "XPROJ" Then
            lc_dir = "GX"
            proj = "YES"
        End If
        If lc_dir = "YPROJ" Then
            lc_dir = "GY"
            proj = "YES"
        End If
        If lc_dir = "GRAVPROJ" Then
            lc_dir = "GZ"
            p01 = -p01
            p02 = -p02
            p21 = -p21
            p22 = -p22
            proj = "YES"
        End If
        If lc_dir = "1" Then
            lc_dir = "LX"
        End If
        If lc_dir = "2" Then
            lc_dir = "LZ"
        End If
        If lc_dir = "3" Then
            lc_dir = "LY"
            p01 = -p01
            p02 = -p02
            p21 = -p21
            p22 = -p22
        End If
        If lc_dir = "X" Then
            lc_dir = "GX"
        End If
        If lc_dir = "Y" Then
            lc_dir = "GY"
        End If

        d1 = Math.Round(p03, 1, MidpointRounding.AwayFromZero)
        p1 = p01
        d2 = Math.Round(p04, 1, MidpointRounding.AwayFromZero)
        p2 = p02
        d3 = Math.Round(p23, 1, MidpointRounding.AwayFromZero)
        p3 = p21
        d4 = Math.Round(p24, 1, MidpointRounding.AwayFromZero)
        p4 = p22

        If ele_number_pass <> 0 Then
            dtbeam_loads.Rows.Add(ele_number_pass, lc_dir, d1, p1, d2, p2, d3, p3, d4, p4, lc_name, tp_to_prt, proj)
        End If
    End Function

    Public Function parsing_areaassign(ByVal area_name As String, ByVal area_story As String, ByVal area_section As String)
        dtarea_assign.Rows.Add(area_name, area_story, area_section)
    End Function

    Public Function parsing_area_conn(ByVal area_name As String, ByVal node_us() As String, ByVal floor_Chk As String, ByVal chker As Integer)
        If node_us.Count = 3 Then
            dtarea_conn.Rows.Add(elementnumber, 0, 0, node_us(0), node_us(1), node_us(2), 0, 1, 0, area_name, floor_Chk, chker)
            elementnumber = elementnumber + 1
        End If
        If node_us.Count = 4 Then
            dtarea_conn.Rows.Add(elementnumber, 0, 0, node_us(0), node_us(1), node_us(2), node_us(3), 1, 0, area_name, floor_Chk, chker)
            elementnumber = elementnumber + 1
        End If

    End Function

    Public Function parsing_thickness(ByVal th_id As String, ByVal th_name As String, ByVal th_mat As String, ByVal th_depth As String)
        dtthickness.Rows.Add(th_id, th_name, th_mat, th_depth)

    End Function

    Public Function parsing_areaload(ByVal Area_name As String, ByVal Area_story As String, ByVal Area_type As String, ByVal Area_dir As String, ByVal Area_loadcase As String, ByVal Area_load_mag As String)
        dt_area_load_etabs.Rows.Add(Area_name, Area_story, Area_type, Area_dir, Area_loadcase, Area_load_mag)
    End Function

    Public Function parsing_loadset(ByVal ld_name As String, ByVal ld_pat As String, ByVal ld_mag As String)
        dt_loadset.Rows.Add(ld_name, ld_pat, ld_mag)
    End Function

    Public Function parsing_pointsprings(ByVal sp_name As String, ByVal sp_val As String)
        sp_val = sp_val.Trim()
        Dim sp_val_brk As String() = sp_val.Split(" ".ToCharArray, StringSplitOptions.RemoveEmptyEntries)
        Dim p_ux As String = "1e+014"
        Dim p_uy As String = "1e+014"
        Dim p_uz As String = "1e+014"
        Dim p_rx As String = "1e+016"
        Dim p_ry As String = "1e+016"
        Dim p_rz As String = "1e+016"

        For l1 = 0 To sp_val_brk.Count - 1 Step 2
            If sp_val_brk(l1) = "UX" Then
                p_ux = sp_val_brk(l1 + 1)
            End If
            If sp_val_brk(l1) = "UY" Then
                p_uy = sp_val_brk(l1 + 1)
            End If
            If sp_val_brk(l1) = "UZ" Then
                p_uz = sp_val_brk(l1 + 1)
            End If
            If sp_val_brk(l1) = "RX" Then
                p_rx = sp_val_brk(l1 + 1)
            End If
            If sp_val_brk(l1) = "RY" Then
                p_ry = sp_val_brk(l1 + 1)
            End If
            If sp_val_brk(l1) = "RZ" Then
                p_rz = sp_val_brk(l1 + 1)
            End If
        Next

        dt_pointspring.Rows.Add(sp_name, p_ux, p_uy, p_uz, p_rx, p_ry, p_rz)
    End Function

    Public Function parsing_pointassign_spring(ByVal sp_node As String, ByVal sp_story As String, ByVal sp_name As String)
        If dt_pointspring.Rows.Count > 0 Then
            Dim node_pass As Integer = func_node_converter(sp_node, sp_story)
            For l1 = 0 To dt_pointspring.Rows.Count - 1
                If dt_pointspring.Rows(l1).Item("Spring_name") = sp_name Then
                    dt_springs.Rows.Add(node_pass, dt_pointspring.Rows(l1).Item("UX"), dt_pointspring.Rows(l1).Item("UY"), dt_pointspring.Rows(l1).Item("UZ"), dt_pointspring.Rows(l1).Item("RX"), dt_pointspring.Rows(l1).Item("RY"), dt_pointspring.Rows(l1).Item("RZ"))
                    Exit For
                End If
            Next
        End If
    End Function

    Public Function writing_units(ByVal out_file As StreamWriter)
        out_file.WriteLine(";---------------------------------------------------------------------------")
        out_file.WriteLine(";  midas Gen Text(MGT) File.")
        out_file.WriteLine(";  Date : ")
        out_file.WriteLine(";---------------------------------------------------------------------------")
        out_file.WriteLine(" ")
        out_file.WriteLine("*VERSION")
        out_file.WriteLine("   8.4.5")
        out_file.WriteLine(" ")
        If dtCrtdUnits.Rows.Count > 0 Then
            out_file.WriteLine("*UNIT")
            For Each row As DataRow In dtCrtdUnits.Rows
                out_file.WriteLine(row("Force") & " , " & row("Length") & " , " & row("Heat") & " , " & row("Temper"))
            Next
        End If
    End Function

    Public Function writing_node(ByVal out_file As StreamWriter)
        If dtCrtdNode.Rows.Count > 0 Then
            out_file.WriteLine("*NODE")
            Dim ck As Integer = 0
            For Each row As DataRow In dtCrtdNode.Rows
                If dtCrtdNode.Rows(ck).Item("IS_PASSING") = 1 Then
                    out_file.WriteLine(row("Node_Number") & ", " & row("X") & ", " & row("Y") & ", " & row("Z"))
                End If
                ck = ck + 1
            Next
        End If
    End Function

    Public Function writing_elem(ByVal out_file As StreamWriter)
        If dtCrtdElem.Rows.Count > 0 Or dtarea_ele_pass.Rows.Count > 0 Then
            out_file.WriteLine("*ELEMENT")
        End If
        Dim f_ele As Integer = 1
        If dtCrtdElem.Rows.Count > 0 Then
            For Each row As DataRow In dtCrtdElem.Rows
                out_file.WriteLine(f_ele.ToString() & ", BEAM ,     " & row("Material") & ",    " & row("Section") & ", " & row("N1") & ", " & row("N2") & ", " & "0" & ",  " & "0")
                dt_final_element_list.Rows.Add(f_ele, "0", "0")
                f_ele = f_ele + 1
            Next
        End If
        If dtarea_ele_pass.Rows.Count > 0 Then
            final_plate_count_start = f_ele
            For Each row As DataRow In dtarea_ele_pass.Rows
                out_file.WriteLine(f_ele.ToString() & ", PLATE ,     " & row("Material") & ",    " & row("Property") & ", " & row("N1") & ", " & row("N2") & ", " & row("N3") & ", " & row("N4") & ", " & row("SUB") & ",  " & row("WID"))
                dt_final_element_list.Rows.Add(f_ele, row("Orignal_area_name"), row("Orignal_area_story"))
                f_ele = f_ele + 1
            Next
        End If
    End Function

    'Public Function writing_story(ByVal out_file As StreamWriter)
    '    If dtStorydata.Rows.Count > 0 Then
    '        out_file.WriteLine("*STORY")
    '        Dim n As Single = 0
    '        Dim col1 As Single = Math.Round((dtCrtdNode.Compute("MAX(X)", Nothing) - dtCrtdNode.Compute("MIN(X)", Nothing)), 3, MidpointRounding.AwayFromZero)
    '        Dim col2 As Single = Math.Round((dtCrtdNode.Compute("MAX(Y)", Nothing) - dtCrtdNode.Compute("MIN(Y)", Nothing)), 3, MidpointRounding.AwayFromZero)
    '        Dim col3 As Single = 0.5 * Math.Round((dtCrtdNode.Compute("MAX(X)", Nothing) - dtCrtdNode.Compute("MIN(X)", Nothing)), 3, MidpointRounding.AwayFromZero)
    '        Dim col4 As Single = 0.5 * Math.Round((dtCrtdNode.Compute("MAX(Y)", Nothing) - dtCrtdNode.Compute("MIN(Y)", Nothing)), 3, MidpointRounding.AwayFromZero)
    '        Dim col5 As Single = 0.05 * Math.Round((dtCrtdNode.Compute("MAX(X)", Nothing) - dtCrtdNode.Compute("MIN(X)", Nothing)), 3, MidpointRounding.AwayFromZero)
    '        Dim col6 As Single = 0.05 * Math.Round((dtCrtdNode.Compute("MAX(Y)", Nothing) - dtCrtdNode.Compute("MIN(Y)", Nothing)), 3, MidpointRounding.AwayFromZero)
    '        Dim col7 As Single = 0.15 * Math.Round((dtCrtdNode.Compute("MAX(X)", Nothing) - dtCrtdNode.Compute("MIN(X)", Nothing)), 3, MidpointRounding.AwayFromZero)
    '        Dim col8 As Single = 0.15 * Math.Round((dtCrtdNode.Compute("MAX(Y)", Nothing) - dtCrtdNode.Compute("MIN(Y)", Nothing)), 3, MidpointRounding.AwayFromZero)

    '        For Each row As DataRow In dtStorydata.Rows
    '            If dtStorydata.Rows(n).Item("Story_height") = 0 Then
    '                out_file.WriteLine("BASE" & " ,  " & row("Story_height") & ", NO," & col1 & " ,  " & col2 & " ,  " & col3 & " ,  " & col4 & " ,  " & col5 & " ,  " & col6 & " ,0,0,1,1,  " & col7 & " ,  " & col8 & ", 0")
    '            ElseIf n < dtStorydata.Rows.Count - 1 Then
    '                out_file.WriteLine(row("Story_name") & " ,  " & row("Story_height") & ", YES," & col1 & " ,  " & col2 & " ,  " & col3 & " ,  " & col4 & " ,  " & col5 & " ,  " & col6 & " , 0, 0, 1, 1,  " & col7 & " ,  " & col8 & ", 0")
    '            Else
    '                out_file.WriteLine("ROOF" & " ,  " & row("Story_height") & ", YES," & col1 & " ,  " & col2 & " ,  " & col3 & " ,  " & col4 & " ,  " & col5 & " ,  " & col6 & " , 0, 0, 1, 1,  " & col7 & " ,  " & col8 & ", 0")
    '            End If
    '            n = n + 1
    '        Next
    '    End If
    'End Function

    Public Function writing_BoundaryConditions(ByVal out_file As StreamWriter)
        If dtboundary_conditions.Rows.Count > 0 Then
            out_file.WriteLine("*CONSTRAINT")
            For Each row As DataRow In dtboundary_conditions.Rows
                out_file.WriteLine(row("Node_Number") & ",  " & row("Dx") & row("Dy") & row("Dz") & row("Rx") & row("Ry") & row("Rz"))
            Next
        End If
    End Function

    Public Function writing_material(ByVal out_file As StreamWriter)
        If dtMatgrade.Rows.Count > 0 Then
            out_file.WriteLine("*MATERIAL")
            For Each row As DataRow In dtMatgrade.Rows
                out_file.WriteLine(row("Material_id") & ", " & row("Material_type") & ", " & row("Material_name") & ", " & row("Specific_Heat") & ", " & row("Heat_Conduction") & ", , C,NO," & row("Damping_Ratio") & ", 2," & row("Modulus_Of_Elasticity") & ",   " & row("Poisons_Ratio") & ",    " & row("Thermal_Coeff") & ",   " & row("Weight_Density") & "    ,0")
            Next
        End If
    End Function

    Public Function writing_section(ByVal out_file As StreamWriter)
        If dtProSection.Rows.Count > 0 Then
            out_file.WriteLine("*SECTION")
            For Each row As DataRow In dtProSection.Rows
                out_file.WriteLine(row("Section_id") & ",  DBUSER ," & row("Section_name") & "   ,CC, 0, 0, 0, 0, 0, 0, YES, " & row("Section_shape") & ", 2, " & row("d1") & ",  " & row("d2") & ", " & row("d3") & ", " & row("d4") & ", " & row("d5") & ",  " & row("d6") & ", " & row("d7") & ", " & row("d8"))
            Next
        End If
    End Function

    Public Function writing_load(ByVal out_file As StreamWriter)
        If dtload_pattern.Rows.Count > 0 Then
            Dim ck1 As Integer = 0
            Dim ck2 As Integer = 0
            Dim ck3 As Integer = 0
            Dim ck4 As Integer = 0
            Dim sw As Integer = 0
            For Each row As DataRow In dtload_pattern.Rows
                out_file.WriteLine("*USE-STLD,   " & row("Pattern_name"))
                If dtload_pattern.Rows(ck1).Item("Pattern_type") = "D" And sw = 0 Then
                    out_file.WriteLine("*SELFWEIGHT, 0, 0, -1,")
                    sw = 1
                End If

                ck2 = 0
                Dim sck2 As Integer = 0
                For Each row2 As DataRow In dtNodalLoads.Rows
                    If dtNodalLoads.Rows(ck2).Item("LC_NAME") = dtload_pattern.Rows(ck1).Item("Pattern_name") Then
                        If sck2 = 0 Then
                            out_file.WriteLine("*CONLOAD")
                            sck2 = 1
                        End If
                        out_file.WriteLine(row2("Node_number") & ", " & row2("FX") & ", " & row2("FY") & ", " & row2("FZ") & ", " & row2("MX") & ", " & row2("MY") & ", " & row2("MZ"))
                    End If
                    ck2 = ck2 + 1
                Next
                ck3 = 0
                Dim sck3 As Integer = 0
                For Each row3 As DataRow In dtbeam_loads.Rows
                    If dtbeam_loads.Rows(ck3).Item("LC_NAME") = dtload_pattern.Rows(ck1).Item("Pattern_name") Then
                        If sck3 = 0 Then
                            out_file.WriteLine("*BEAMLOAD")
                            sck3 = 1
                        End If
                        out_file.WriteLine(row3("Element_number") & ", BEAM ," & row3("Type_to_print") & ", " & row3("Loading_direction") & ", " & row3("Projection") & ", NO,aDir[1], , , , " & row3("d1") & ", " & row3("p1") & ", " & row3("d2") & ", " & row3("p2") & ", " & row3("d3") & ", " & row3("p3") & ", " & row3("d4") & ", " & row3("p4") & ", , NO, 0, 0, NO,")
                    End If
                    ck3 = ck3 + 1
                Next
                ck4 = 0
                Dim sck4 As Integer = 0
                If dt_area_load_etabs.Rows.Count > 0 Then
                    For n_area_etabs = 0 To dt_area_load_etabs.Rows.Count - 1
                        If dt_area_load_etabs.Rows(n_area_etabs).Item("Area_loadcase") = dtload_pattern.Rows(ck1).Item("Pattern_name") Then
                            If sck4 = 0 Then
                                out_file.WriteLine(" ")
                                out_file.WriteLine("*PRESSURE")
                                sck4 = 1
                            End If
                            Dim neg_chk As Integer = 0
                            For n_area_ele = final_plate_count_start - 1 To dt_final_element_list.Rows.Count - 1
                                If CStr(dt_area_load_etabs.Rows(n_area_etabs).Item("Area_name") & "_" & dt_area_load_etabs.Rows(n_area_etabs).Item("Area_story")) = CStr(dt_final_element_list.Rows(n_area_ele).Item("Final_org_name") & "_" & dt_final_element_list.Rows(n_area_ele).Item("Final_org_story")) Then
                                    Dim lc_dir As String = dt_area_load_etabs.Rows(n_area_etabs).Item("Area_dir")
                                    Dim proj As String = "NO"
                                    If lc_dir = "GRAV" Then
                                        lc_dir = "GZ"
                                        neg_chk = 1
                                    End If
                                    If lc_dir = "XPROJ" Then
                                        lc_dir = "GX"
                                        proj = "YES"
                                    End If
                                    If lc_dir = "YPROJ" Then
                                        lc_dir = "GY"
                                        proj = "YES"
                                    End If
                                    If lc_dir = "GRAVPROJ" Then
                                        lc_dir = "GZ"
                                        proj = "YES"
                                        neg_chk = 1
                                    End If
                                    If lc_dir = "1" Then
                                        lc_dir = "LX"
                                    End If
                                    If lc_dir = "2" Then
                                        lc_dir = "LY"
                                    End If
                                    If lc_dir = "3" Then
                                        lc_dir = "LZ"
                                    End If
                                    If lc_dir = "X" Then
                                        lc_dir = "GX"
                                    End If
                                    If lc_dir = "Y" Then
                                        lc_dir = "GY"
                                    End If
                                    If neg_chk = 0 Then
                                        If CStr(dt_area_load_etabs.Rows(n_area_etabs).Item("Area_load_mag")) <> "0" Then
                                            out_file.WriteLine(dt_final_element_list.Rows(n_area_ele).Item("Final_reference") & ", PRES, PLATE, FACE, " & lc_dir & ", 0, 0, 0, " & proj & ", " & dt_area_load_etabs.Rows(n_area_etabs).Item("Area_load_mag") & ", 0, 0, 0, 0,")
                                        End If
                                        'If dt_area_load_etabs.Rows.Count > 3 Then
                                        '    dt_area_load_etabs.Rows(n_area_etabs).Delete()
                                        'End If
                                    End If
                                    If neg_chk = 1 Then
                                        If CStr(dt_area_load_etabs.Rows(n_area_etabs).Item("Area_load_mag")) <> "0" Then
                                            out_file.WriteLine(dt_final_element_list.Rows(n_area_ele).Item("Final_reference") & ", PRES, PLATE, FACE, " & lc_dir & ", 0, 0, 0, " & proj & ", " & dt_area_load_etabs.Rows(n_area_etabs).Item("Area_load_mag") & ", 0, 0, 0, 0,")
                                        End If
                                        'If dt_area_load_etabs.Rows.Count > 3 Then
                                        '    dt_area_load_etabs.Rows(n_area_etabs).Delete()
                                        'End If
                                    End If
                                End If
                                Application.DoEvents()
                            Next n_area_ele
                        End If
                        Application.DoEvents()
                    Next
                End If
                ck1 = ck1 + 1
                Application.DoEvents()
            Next
        End If
    End Function

    Public Function writing_loadpattern(ByVal out_file As StreamWriter)
        If dtload_pattern.Rows.Count > 0 Then
            out_file.WriteLine("*STLDCASE")
            For Each row As DataRow In dtload_pattern.Rows
                out_file.WriteLine(row("Pattern_name") & ", " & row("Pattern_type") & ",")
            Next
        End If
    End Function

    Public Function writing_thickness(ByVal out_file As StreamWriter)
        If dtthickness.Rows.Count > 0 Then
            out_file.WriteLine("*THICKNESS")
            For Each row As DataRow In dtthickness.Rows
                out_file.WriteLine(row("Thickness_id") & ", VALUE, YES, " & row("Thickness_depth") & ", 0, NO, 0, 0")
            Next
        End If
    End Function

    Public Function writing_modifier(ByVal out_file As StreamWriter)
        If dtmodifier.Rows.Count > 0 Then
            out_file.WriteLine("*SECT-SCALE")
            For i = 0 To dtmodifier.Rows.Count - 1
                out_file.WriteLine(dtmodifier.Rows(i).Item("mod_id") & ", " & dtmodifier.Rows(i).Item("amod") & ", " & dtmodifier.Rows(i).Item("a2mod") & ", " & dtmodifier.Rows(i).Item("a3mod") & ", " & dtmodifier.Rows(i).Item("jmod") & ", " & dtmodifier.Rows(i).Item("i2mod") & ", " & dtmodifier.Rows(i).Item("i3mod") & ", " & dtmodifier.Rows(i).Item("wmod") & ", , 1")
            Next
        End If
    End Function

    Public Function writting_spring(ByVal out_file As StreamWriter)
        If dt_springs.Rows.Count > 0 Then
            out_file.WriteLine("*SPRING")
            For i = 0 To dt_springs.Rows.Count - 1
                out_file.WriteLine(dt_springs.Rows(i).Item("Sp_node") & ", LINEAR, " & dt_springs.Rows(i).Item("Sp_ux") & ", " & dt_springs.Rows(i).Item("Sp_uy") & ", " & dt_springs.Rows(i).Item("Sp_uz") & ", " & dt_springs.Rows(i).Item("Sp_rx") & ", " & dt_springs.Rows(i).Item("Sp_ry") & ", " & dt_springs.Rows(i).Item("Sp_rz") & ", NO, 0, 0, 0, 0, 0, 0, , 0, 0, 0, 0, 0")
            Next
        End If
    End Function

    'Public Function writing_floadtype(ByVal out_file As StreamWriter)
    '    If dt_area_load_etabs.Rows.Count > 0 Then
    '        out_file.WriteLine(" ")
    '        out_file.WriteLine("*PRESSURE")
    '        For n_area_etabs = 0 To dt_area_load_etabs.Rows.Count - 1
    '            Dim neg_chk As Integer = 0
    '            For n_area_ele = final_plate_count_start - 1 To dt_final_element_list.Rows.Count - 1
    '                If CStr(dt_area_load_etabs.Rows(n_area_etabs).Item("Area_name") & "_" & dt_area_load_etabs.Rows(n_area_etabs).Item("Area_story")) = CStr(dt_final_element_list.Rows(n_area_ele).Item("Final_org_name") & "_" & dt_final_element_list.Rows(n_area_ele).Item("Final_org_story")) Then
    '                    Dim lc_dir As String = dt_area_load_etabs.Rows(n_area_etabs).Item("Area_dir")
    '                    If lc_dir = "GRAV" Then
    '                        lc_dir = "GZ"
    '                        neg_chk = 1
    '                    End If
    '                    If lc_dir = "XPROJ" Then
    '                        lc_dir = "GX"
    '                    End If
    '                    If lc_dir = "YPROJ" Then
    '                        lc_dir = "GY"
    '                    End If
    '                    If lc_dir = "GRAVPROJ" Then
    '                        lc_dir = "GZ"
    '                        neg_chk = 1
    '                    End If
    '                    If lc_dir = "1" Then
    '                        lc_dir = "LX"
    '                    End If
    '                    If lc_dir = "2" Then
    '                        lc_dir = "LY"
    '                    End If
    '                    If lc_dir = "3" Then
    '                        lc_dir = "LZ"
    '                    End If
    '                    If lc_dir = "X" Then
    '                        lc_dir = "GX"
    '                    End If
    '                    If lc_dir = "Y" Then
    '                        lc_dir = "GY"
    '                    End If
    '                    If neg_chk = 0 Then
    '                        out_file.WriteLine(dt_final_element_list.Rows(n_area_ele).Item("Final_reference") & ", PRES, PLATE, FACE, " & dt_area_load_etabs.Rows(n_area_etabs).Item("Area_dir") & ", 0, 0, 0, NO," & dt_area_load_etabs.Rows(n_area_etabs).Item("Area_load_mag") & ", 0, 0, 0, 0,")
    '                    End If
    '                    If neg_chk = 1 Then
    '                        out_file.WriteLine(dt_final_element_list.Rows(n_area_ele).Item("Final_reference") & ", PRES, PLATE, FACE, " & dt_area_load_etabs.Rows(n_area_etabs).Item("Area_dir") & ", 0, 0, 0, NO, -" & dt_area_load_etabs.Rows(n_area_etabs).Item("Area_load_mag") & ", 0, 0, 0, 0,")
    '                    End If
    '                End If
    '            Next n_area_ele
    '        Next n_area_etabs
    '    End If
    'End Function

    'Public Function writing_floorload(ByVal out_file As StreamWriter)
    '    If dt_areaload_pass.Rows.Count > 0 Then
    '        out_file.WriteLine(" ")
    '        out_file.WriteLine("*FLOORLOAD")
    '        For Each row As DataRow In dt_areaload_pass.Rows
    '            If row("Area_pass_n4") <> 0 Then
    '                out_file.WriteLine("   " & row("Area_pass_name") & ", 2, 0, 0, 0, 0, " & row("Area_pass_dir") & ", NO, , NO, NO, , " & row("Area_pass_n1") & ", " & row("Area_pass_n2") & ", " & row("Area_pass_n3") & ", " & row("Area_pass_n4"))
    '            Else
    '                out_file.WriteLine("   " & row("Area_pass_name") & ", 2, 0, 0, 0, 0, " & row("Area_pass_dir") & ", NO, , NO, NO, , " & row("Area_pass_n1") & ", " & row("Area_pass_n2") & ", " & row("Area_pass_n3"))
    '            End If

    '        Next
    '    End If
    'End Function

    Public Function rearrange_elem()

        Dim N1 As Integer
        Dim N2 As Integer
        Dim lineassign_count As Integer = dtcrtdlineassign.Rows.Count - 1
        Dim elemconn_count As Integer = dtCrtdElem_conn.Rows.Count - 1
        Dim story_count As Integer = dtStorydata.Rows.Count - 1

        For nthbeam = 0 To lineassign_count
            For nthbeam1 = 0 To elemconn_count
                If dtCrtdElem_conn.Rows(nthbeam1).Item("Type") = dtcrtdlineassign.Rows(nthbeam).Item("la_uq_elem") Then
                    If dtCrtdElem_conn.Rows(CStr(nthbeam1)).Item("Floor_var") = "0" Then
                        N1 = func_node_converter(dtCrtdElem_conn.Rows(CStr(nthbeam1)).Item("N1"), dtcrtdlineassign(nthbeam).Item("la_story"))
                        N2 = func_node_converter(dtCrtdElem_conn.Rows(CStr(nthbeam1)).Item("N2"), dtcrtdlineassign(nthbeam).Item("la_story"))
                        Exit For
                    End If
                    If dtCrtdElem_conn.Rows(CStr(nthbeam1)).Item("Floor_var") <> "0" Then
                        For nthbeam2 = 0 To story_count
                            If dtcrtdlineassign(nthbeam).Item("la_story") = dtStorydata.Rows(nthbeam2).Item("Story_name") Then
                                N1 = func_node_converter(dtCrtdElem_conn.Rows(CStr(nthbeam1)).Item("N1"), dtStorydata.Rows(nthbeam2 - dtCrtdElem_conn.Rows(CStr(nthbeam1)).Item("Floor_var")).Item("Story_name"))
                                N2 = func_node_converter(dtCrtdElem_conn.Rows(CStr(nthbeam1)).Item("N2"), dtcrtdlineassign(nthbeam).Item("la_story"))
                                Application.DoEvents()
                                Exit For
                            End If
                            Application.DoEvents()
                        Next nthbeam2
                    End If
                End If
                Application.DoEvents()
            Next nthbeam1
            If N1 <> N2 And N1 <> 0 And N2 <> 0 Then
                dtCrtdElem.Rows.Add(CStr(nthbeam + 1), CStr(dtcrtdlineassign.Rows(CStr(nthbeam)).Item("la_uq_elem")), CStr(dtcrtdlineassign.Rows(CStr(nthbeam)).Item("la_section")), 0, N1, N2, CStr(dtcrtdlineassign.Rows(CStr(nthbeam)).Item("la_story")))
                area_element_count_begin = nthbeam + 1
            End If
            Application.DoEvents()
        Next nthbeam

    End Function

    Public Function rearrange_story(ByVal dtcrtdstoryorg As DataTable)
        Dim nthstory As Integer
        Dim pbval As Integer = 0
        story_height_sum = 0
        nthstory = dtcrtdstoryorg.Rows.Count - 1

        For Each row As DataRow In dtcrtdstoryorg.Rows
            If nthstory >= 0 Then
                story_height_sum = story_height_sum + dtcrtdstoryorg.Rows(nthstory).Item("Story_height")
                dtStorydata.Rows.Add(dtcrtdstoryorg.Rows(nthstory).Item("Story_name"), story_height_sum) ''breaking id therer is a space in between the stgory names
            End If
            nthstory = nthstory - 1
            pbval = pbval + 1
            Application.DoEvents()
        Next
    End Function

    Public Function elem_section()
        Dim n As Integer = 0
        Dim n1 As Integer
        Dim n2 As Integer
        Dim sec_chk As Integer = 0
        For Each row As DataRow In dtCrtdElem.Rows
            n1 = 0
            sec_chk = 0
            For Each row1 As DataRow In dtProSection.Rows
                If dtCrtdElem.Rows(n).Item("Section") = dtProSection.Rows(n1).Item("Section_name") Then
                    dtCrtdElem.Rows(n).Item("Section") = dtProSection.Rows(n1).Item("Section_id")
                    sec_chk = 1
                    n2 = 0
                    For Each row3 As DataRow In dtMatgrade.Rows
                        If dtMatgrade.Rows(n2).Item("Material_name") = dtProSection.Rows(n1).Item("Section_mat") Then
                            dtCrtdElem.Rows(n).Item("Material") = dtMatgrade.Rows(n2).Item("Material_id")
                            Application.DoEvents()
                            Exit For
                        End If
                        n2 = n2 + 1
                        Application.DoEvents()
                    Next
                    Exit For
                End If
                n1 = n1 + 1
            Next

            If sec_chk = 0 Then
                'Section could not be found
                'search Datatable again
                Dim strNF As String = row.Item("Section").ToString
                Dim nf() As DataRow = dtProSectionUndef.Select("Section_name = '" & strNF & "'")
                If nf.Count > 0 Then

                    dtCrtdElem.Rows(n).Item("Section") = CInt(nf(0)(0))

                    If dtCrtdElem.Rows(n).Item("Material") = 0 Then
                        Dim matnf As String = nf(0)("Section_mat").ToString
                        Dim nfmat() As DataRow = dtMatgrade.Select("Material_name = '" & matnf & "'")
                        If nfmat.Count > 0 Then
                            dtCrtdElem.Rows(n).Item("Material") = nfmat(0)
                        End If

                    End If

                Else
                    dtCrtdElem.Rows(n).Item("Section") = 1
                End If

            End If
            If dtCrtdElem.Rows(n).Item("Material") = 0 Then
                dtCrtdElem.Rows(n).Item("Material") = 1
            End If
            n = n + 1
            Application.DoEvents()
        Next
    End Function

    Public Function area_element()
        Dim st As String = 0
        Dim t_mat_c As Integer = 0
        Dim t_sec_c As Integer = 0
        Dim N1_pass As Integer = 0
        Dim N2_pass As Integer = 0
        Dim N3_pass As Integer = 0
        Dim N4_pass As Integer = 0

        For n_main = 0 To dtarea_assign.Rows.Count - 1
            For n1 = 0 To dtarea_conn.Rows.Count - 1
                If dtarea_assign.Rows(n_main).Item("Area_name") = dtarea_conn.Rows(n1).Item("Connectivity_name") Then
                    Dim flr_var() As String = dtarea_conn.Rows(n1).Item("Connectivity_floor_chk").Split(" ".ToCharArray(), StringSplitOptions.RemoveEmptyEntries) 'remember deleteing it after loop
                    If flr_var(0) <> 0 Then
                        For nthbeam2 = 0 To storydata_count
                            If dtarea_assign.Rows(n_main).Item("Area_story") = dtStorydata.Rows(nthbeam2).Item("Story_name") Then
                                N1_pass = func_node_converter(dtarea_conn.Rows(n1).Item("N1"), dtStorydata.Rows(nthbeam2 - flr_var(0)).Item("Story_name"))
                                Exit For
                            End If
                        Next nthbeam2
                    End If
                    If flr_var(0) = 0 Then
                        N1_pass = func_node_converter(dtarea_conn.Rows(n1).Item("N1"), dtarea_assign.Rows(n_main).Item("Area_story"))
                    End If

                    If flr_var(1) <> 0 Then
                        For nthbeam2 = 0 To storydata_count
                            If dtarea_assign.Rows(n_main).Item("Area_story") = dtStorydata.Rows(nthbeam2).Item("Story_name") Then
                                N2_pass = func_node_converter(dtarea_conn.Rows(n1).Item("N2"), dtStorydata.Rows(nthbeam2 - flr_var(1)).Item("Story_name"))
                                Exit For
                            End If
                        Next nthbeam2
                    End If
                    If flr_var(1) = 0 Then
                        N2_pass = func_node_converter(dtarea_conn.Rows(n1).Item("N2"), dtarea_assign.Rows(n_main).Item("Area_story"))
                    End If

                    If flr_var(2) <> 0 Then
                        For nthbeam2 = 0 To storydata_count
                            If dtarea_assign.Rows(n_main).Item("Area_story") = dtStorydata.Rows(nthbeam2).Item("Story_name") Then
                                N3_pass = func_node_converter(dtarea_conn.Rows(n1).Item("N3"), dtStorydata.Rows(nthbeam2 - flr_var(2)).Item("Story_name"))
                                Exit For
                            End If
                        Next nthbeam2
                    End If
                    If flr_var(2) = 0 Then
                        N3_pass = func_node_converter(dtarea_conn.Rows(n1).Item("N3"), dtarea_assign.Rows(n_main).Item("Area_story"))
                    End If

                    If dtarea_conn.Rows(n1).Item("N4") <> "0" Then
                        If flr_var(3) <> 0 Then
                            For nthbeam2 = 0 To storydata_count
                                If dtarea_assign.Rows(n_main).Item("Area_story") = dtStorydata.Rows(nthbeam2).Item("Story_name") Then
                                    N4_pass = func_node_converter(dtarea_conn.Rows(n1).Item("N4"), dtStorydata.Rows(nthbeam2 - flr_var(3)).Item("Story_name"))
                                    Exit For
                                End If
                            Next nthbeam2
                        End If
                        If flr_var(3) = 0 Then
                            N4_pass = func_node_converter(dtarea_conn.Rows(n1).Item("N4"), dtarea_assign.Rows(n_main).Item("Area_story"))
                        End If
                    Else
                        N4_pass = 0
                    End If

                    t_sec_c = 0
                    Dim area_mat As String = "1"
                    Dim area_pro As String = "1"
                    For Each row5 As DataRow In dtthickness.Rows
                        If dtarea_assign.Rows(n_main).Item("Area_section") = dtthickness.Rows(t_sec_c).Item("Thickness_name") Then
                            area_pro = dtthickness.Rows(t_sec_c).Item("Thickness_id")
                            t_mat_c = 0
                            For Each row6 As DataRow In dtMatgrade.Rows
                                If dtMatgrade.Rows(t_mat_c).Item("Material_name") = dtthickness.Rows(t_sec_c).Item("Thickness_material") Then
                                    area_mat = dtMatgrade.Rows(t_mat_c).Item("Material_id")
                                    Application.DoEvents()
                                    Exit For
                                End If
                                t_mat_c = t_mat_c + 1
                                Application.DoEvents()
                            Next
                            Exit For
                        End If
                        t_sec_c = t_sec_c + 1
                        Application.DoEvents()
                    Next
                    If N1_pass <> 0 And N2_pass <> 0 And N3_pass <> 0 And N1_pass <> N2_pass And N1_pass <> N3_pass And N1_pass <> N4_pass And N2_pass <> N3_pass And N2_pass <> N4_pass And N3_pass <> N4_pass Then
                        dtarea_ele_pass.Rows.Add(dtarea_conn.Rows(n1).Item("Connectivity_count"), area_mat, area_pro, N1_pass, N2_pass, N3_pass, N4_pass, dtarea_conn.Rows(n1).Item("SUB"), dtarea_conn.Rows(n1).Item("WID"), dtarea_assign.Rows(n_main).Item("Area_name"), dtarea_assign.Rows(n_main).Item("Area_story"), dtarea_conn.Rows(n1).Item("chker"))
                        Application.DoEvents()
                    End If
                End If
                Application.DoEvents()
            Next n1
            Application.DoEvents()
        Next n_main
    End Function

    'Public Function areaload_floorload()
    '    Dim n As Integer = 0
    '    Dim n1 As Integer = 0
    '    Dim lc_dir As String

    '    For Each row As DataRow In dt_area_load_type.Rows
    '        n1 = 0
    '        For Each row2 As DataRow In dtarea_ele_pass.Rows
    '            If dtarea_ele_pass.Rows(n1).Item("Orignal_area_name") = dt_area_load_type.Rows(n).Item("Loadcase_name_area") And dtarea_ele_pass.Rows(n1).Item("Orignal_area_story") = dt_area_load_type.Rows(n).Item("Loadcase_name_story") Then
    '                If dt_area_load_type.Rows(n).Item("Loadcase_name_dir") = "GRAV" Then
    '                    lc_dir = "GZ"
    '                End If
    '                If dt_area_load_type.Rows(n).Item("Loadcase_name_dir") = "XPROJ" Then
    '                    lc_dir = "GX"
    '                End If
    '                If dt_area_load_type.Rows(n).Item("Loadcase_name_dir") = "YPROJ" Then
    '                    lc_dir = "GY"
    '                End If
    '                If dt_area_load_type.Rows(n).Item("Loadcase_name_dir") = "GRAVPROJ" Then
    '                    lc_dir = "GZ"
    '                End If
    '                If dt_area_load_type.Rows(n).Item("Loadcase_name_dir") = "1" Then
    '                    lc_dir = "LX"                             'check again once
    '                End If                                        'check again once
    '                If dt_area_load_type.Rows(n).Item("Loadcase_name_dir") = "2" Then
    '                    lc_dir = "LY"                             'check again once
    '                End If                                        'check again once
    '                If dt_area_load_type.Rows(n).Item("Loadcase_name_dir") = "3" Then
    '                    lc_dir = "LZ"                             'check again once
    '                End If                                        'check again once
    '                If dt_area_load_type.Rows(n).Item("Loadcase_name_dir") = "X" Then
    '                    lc_dir = "GX"                             'check again once
    '                End If                                        'check again once
    '                If dt_area_load_type.Rows(n).Item("Loadcase_name_dir") = "Y" Then
    '                    lc_dir = "GY"                             'check again once
    '                End If
    '                If dtarea_ele_pass.Rows(n1).Item("chker") = 1 Then
    '                    dt_areaload_pass.Rows.Add(dt_area_load_type.Rows(n).Item("Loadcase_name"), lc_dir, dtarea_ele_pass.Rows(n1).Item("N1"), dtarea_ele_pass.Rows(n1).Item("N2"), dtarea_ele_pass.Rows(n1).Item("N3"), dtarea_ele_pass.Rows(n1).Item("N4"))
    '                End If
    '            End If
    '            n1 = n1 + 1
    '        Next
    '        n = n + 1
    '    Next
    'End Function

    Public Function func_node_converter(ByVal input_node As String, ByVal input_story As String)

        Dim n_node_p As Integer = 0
        Dim fnd As Integer = 0
        Dim st_point As Integer
        For n1 = 0 To storydata_count
            If dtStorydata.Rows(n1).Item("Story_name") = input_story Then
                st_point = n1 * tot_org_nodes
                Exit For
            End If
            Application.DoEvents()
        Next n1
        For n_node = st_point To node_count_infunc
            If input_node = dtCrtdNode.Rows(n_node).Item("Node_orignal") And input_story = dtCrtdNode.Rows(n_node).Item("Story_orignal") Then
                dtCrtdNode.Rows(n_node).Item("IS_PASSING") = 1
                n_node_p = n_node
                fnd = 1
                Application.DoEvents()
                Exit For
            End If
            Application.DoEvents()
        Next n_node
        If fnd = 1 Then
            Return (dtCrtdNode.Rows(n_node_p).Item("Node_Number"))
        Else
            Return (0)
        End If
        Application.DoEvents()
    End Function

    Public Function func_element_converter(ByVal input_type As String, ByVal input_story As String)

        Dim n_ele_p As Integer = 0
        Dim fnd As Integer = 0
        For n_ele = 0 To dtCrtdElem.Rows.Count - 1
            If input_type = dtCrtdElem.Rows(n_ele).Item("Type") And input_story = dtCrtdElem.Rows(n_ele).Item("Floor_var") Then
                n_ele_p = n_ele
                fnd = 1
                Exit For
            End If
        Next n_ele
        If fnd = 1 Then
            Return (dtCrtdElem.Rows(n_ele_p).Item("Element_Number"))
        Else
            Return (0)
        End If
        Application.DoEvents()
    End Function

    Public Function straight_line_check(ByVal node_coll() As String)
        If node_coll.Count > 0 Then
            For l1 = 0 To dtCrtdNode.Rows.Count - 1
                If node_coll(0) = dtCrtdNode.Rows(l1).Item("Node_Number") Then
                    For l2 = 0 To dtCrtdNode.Rows.Count - 1
                        If node_coll(1) = dtCrtdNode.Rows(l2).Item("Node_Number") Then
                            If dtCrtdNode.Rows(l1).Item("X") = dtCrtdNode.Rows(l2).Item("X") Or dtCrtdNode.Rows(l1).Item("Y") = dtCrtdNode.Rows(l2).Item("Y") Or dtCrtdNode.Rows(l1).Item("Z") = dtCrtdNode.Rows(l2).Item("Z") Then
                                Return 0
                            End If
                        End If
                        If node_coll(2) = dtCrtdNode.Rows(l2).Item("Node_Number") Then
                            If dtCrtdNode.Rows(l1).Item("X") = dtCrtdNode.Rows(l2).Item("X") Or dtCrtdNode.Rows(l1).Item("Y") = dtCrtdNode.Rows(l2).Item("Y") Or dtCrtdNode.Rows(l1).Item("Z") = dtCrtdNode.Rows(l2).Item("Z") Then
                                Return 0
                            End If
                        End If
                    Next
                End If
            Next
            Return 1
        End If
    End Function

    Private Sub path_disp_Click(sender As Object, e As EventArgs) Handles path_disp.Click
        OpenFileDialog.Title = "Enter the input file"
        OpenFileDialog.Filter = "ETABS Text Files (*.$et, *e2k)|*.$et;*.e2k|All Files (*.*)|*.*"
        OpenFileDialog.ShowDialog()
        file_name = OpenFileDialog.FileName()
        If file_name <> "NO_FILE_SELECTED" Then
            path_disp.Text = file_name
            in_path = Path.GetDirectoryName(file_name)
            only_file_name = Path.GetFileNameWithoutExtension(file_name)
            lines = File.ReadAllLines(file_name)
            nodenumber = 1
            elementnumber = 1
        End If
        Application.DoEvents()
    End Sub

    Public Function delete_db()

        dtCrtdUnits.Columns.Clear()
        dtCrtdUnits.Rows.Clear()

        dtCrtdNode.Columns.Clear()
        dtCrtdNode.Rows.Clear()

        dtCrtdElem_conn.Columns.Clear()
        dtCrtdElem_conn.Rows.Clear()

        dtCrtdElem.Columns.Clear()
        dtCrtdElem.Rows.Clear()

        dtcrtdnodeorg.Columns.Clear()
        dtcrtdnodeorg.Rows.Clear()

        dtcrtdlineassign.Columns.Clear()
        dtcrtdlineassign.Rows.Clear()

        dtcrtdstoryorg.Columns.Clear()
        dtcrtdstoryorg.Rows.Clear()

        dtStorydata.Columns.Clear()
        dtStorydata.Rows.Clear()

        dtpointassign.Columns.Clear()
        dtpointassign.Rows.Clear()

        dtboundary_conditions.Columns.Clear()
        dtboundary_conditions.Rows.Clear()

        dtMatgrade.Columns.Clear()
        dtMatgrade.Rows.Clear()

        dtProSection.Columns.Clear()
        dtProSection.Rows.Clear()

        dtProSectionUndef.Columns.Clear()
        dtProSectionUndef.Rows.Clear()

        dtload_pattern.Columns.Clear()
        dtload_pattern.Rows.Clear()

        dtNodalLoads.Columns.Clear()
        dtNodalLoads.Rows.Clear()

        dtbeam_loads.Columns.Clear()
        dtbeam_loads.Rows.Clear()

        dtarea_assign.Columns.Clear()
        dtarea_assign.Rows.Clear()

        dtarea_conn.Columns.Clear()
        dtarea_conn.Rows.Clear()

        dtthickness.Columns.Clear()
        dtthickness.Rows.Clear()

        dtarea_ele_pass.Columns.Clear()
        dtarea_ele_pass.Rows.Clear()

        dt_area_load_etabs.Columns.Clear()
        dt_area_load_etabs.Rows.Clear()

        dt_area_load_type.Columns.Clear()
        dt_area_load_type.Rows.Clear()

        dt_areaload_pass.Columns.Clear()
        dt_areaload_pass.Rows.Clear()

        dt_final_element_list.Columns.Clear()
        dt_final_element_list.Rows.Clear()

        dt_loadset.Columns.Clear()
        dt_loadset.Rows.Clear()

        dtmodifier.Columns.Clear()
        dtmodifier.Rows.Clear()

        dt_pointspring.Columns.Clear()
        dt_pointspring.Rows.Clear()

        dt_springs.Columns.Clear()
        dt_springs.Rows.Clear()

        ProgressBar_read.Value = 0
        ProgressBar_writing.Value = 0

        Application.DoEvents()
    End Function

    Private Sub Button2_Click(sender As Object, e As EventArgs) Handles Button2.Click
        delete_db()
        End
        Application.Exit()
    End Sub

    Private Sub Button3_Click(sender As Object, e As EventArgs) Handles Button3.Click
        MessageBox.Show("Important Points to be noted :" & vbNewLine & "1. Story data needs to be generated by user for more accuracy." _
                        & vbNewLine & "2. Meshing Should be done wherever required" _
                        & vbNewLine & "3. If type of loading is not found in GEN it will be considered as live load" _
                        & vbNewLine & "4. Earthquake Loading and Wind Loading Should be generated as per requirement." _
                        & vbNewLine & "5. Sections whose dimensions are altered are represented with a '*' at end" _
                        & vbNewLine & "6. Only Standard Boundary Conditions are transfered others have to be given explicitly by the user. (It will be prompted if no boundary conditions are transfered)" _
                        & vbNewLine & "7. USer defined sections will only be transformed")
    End Sub

End Class




    Private Sub Button3_Click(sender As Object, e As EventArgs) Handles Button3.Click
        MessageBox.Show("Important Points to be noted :" & vbNewLine & "1. Story data needs to be generated by user for more accuracy." _
                        & vbNewLine & "2. Meshing Should be done wherever required" _
                        & vbNewLine & "3. If type of loading is not found in GEN it will be considered as live load" _
                        & vbNewLine & "4. Earthquake Loading and Wind Loading Should be generated as per requirement." _
                        & vbNewLine & "5. Sections whose dimensions are altered are represented with a '*' at end" _
                        & vbNewLine & "6. Only Standard Boundary Conditions are transfered others have to be given explicitly by the user. (It will be prompted if no boundary conditions are transfered)" _
                        & vbNewLine & "7. USer defined sections will only be transformed")
    End Sub

End Class


